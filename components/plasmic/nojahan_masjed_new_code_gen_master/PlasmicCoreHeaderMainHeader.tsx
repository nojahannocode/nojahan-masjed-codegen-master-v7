// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: KN7IYHQF1AEV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import AuthLoginComponent from "../../AuthLoginComponent"; // plasmic-import: Tm95Yqly1EMg/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicCoreHeaderMainHeader.module.css"; // plasmic-import: KN7IYHQF1AEV/css

import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: pvRfclCatxOV/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: ELgPVVGypR9T/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: 1XX1FqE2P08x/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: wumpzot6JlJS/icon
import LogoNoSvgIcon from "./icons/PlasmicIcon__LogoNoSvg"; // plasmic-import: Bi9ZoqrIWUrr/icon

import { me as __fn_me } from "@/angel/me"; // plasmic-import: me/customFunction

createPlasmicElementProxy;

export type PlasmicCoreHeaderMainHeader__VariantMembers = {};
export type PlasmicCoreHeaderMainHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicCoreHeaderMainHeader__VariantsArgs;
export const PlasmicCoreHeaderMainHeader__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCoreHeaderMainHeader__ArgsType = {
  modalViewer?: (isOpen: boolean) => void;
};
type ArgPropType = keyof PlasmicCoreHeaderMainHeader__ArgsType;
export const PlasmicCoreHeaderMainHeader__ArgProps = new Array<ArgPropType>(
  "modalViewer"
);

export type PlasmicCoreHeaderMainHeader__OverridesType = {
  root?: Flex__<"div">;
  drawer?: Flex__<typeof AntdDrawer>;
  hr2?: Flex__<"div">;
  hr?: Flex__<"div">;
  loginModalDrawer?: Flex__<typeof AntdModal>;
  loginComponent2?: Flex__<typeof AuthLoginComponent>;
  adminLoginModal?: Flex__<typeof AntdModal>;
  loginComponent3?: Flex__<typeof AuthLoginComponent>;
  loginModal?: Flex__<typeof AntdModal>;
  loginComponent?: Flex__<typeof AuthLoginComponent>;
};

export interface DefaultCoreHeaderMainHeaderProps {
  modalViewer?: (isOpen: boolean) => void;
  className?: string;
}

const $$ = {
  me: __fn_me
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCoreHeaderMainHeader__RenderFunc(props: {
  variants: PlasmicCoreHeaderMainHeader__VariantsArgs;
  args: PlasmicCoreHeaderMainHeader__ArgsType;
  overrides: PlasmicCoreHeaderMainHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginComponent.loginDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loginModalDrawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginComponent2.loginDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "adminLoginModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginComponent3.loginDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "auth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {})();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <div className={classNames(projectcss.all, sty.freeBox__a31Dp)}>
        <Icon11Icon
          className={classNames(projectcss.all, sty.svg___6C9Si)}
          onClick={async event => {
            const $steps = {};

            $steps["updateDrawerOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["drawer", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateDrawerOpen"] != null &&
              typeof $steps["updateDrawerOpen"] === "object" &&
              typeof $steps["updateDrawerOpen"].then === "function"
            ) {
              $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
            }
          }}
          role={"img"}
        />

        <AntdDrawer
          data-plasmic-name={"drawer"}
          data-plasmic-override={overrides.drawer}
          className={classNames("__wab_instance", sty.drawer)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          drawerScopeClassName={sty["drawer__drawer"]}
          footer={
            <React.Fragment>
              {(() => {
                try {
                  return !!$$.me()?.token && $$.me()?.user?.role === "admin";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__zzK3H)}>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__pzgh9)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["goToAdminActivityActivitesListest"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/admin/activities`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToAdminActivityActivitesListest"] != null &&
                        typeof $steps["goToAdminActivityActivitesListest"] ===
                          "object" &&
                        typeof $steps["goToAdminActivityActivitesListest"]
                          .then === "function"
                      ) {
                        $steps["goToAdminActivityActivitesListest"] =
                          await $steps["goToAdminActivityActivitesListest"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c6Fej
                      )}
                    >
                      {
                        "\u067e\u0646\u0644 \u0645\u062f\u06cc\u0631\u06cc\u062a"
                      }
                    </div>
                  </AntdButton>
                </div>
              ) : null}
              {(() => {
                try {
                  return !$$.me()?.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__vieyI)}>
                  <AntdModal
                    data-plasmic-name={"adminLoginModal"}
                    data-plasmic-override={overrides.adminLoginModal}
                    className={classNames(
                      "__wab_instance",
                      sty.adminLoginModal
                    )}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9GeCt
                        )}
                      />
                    }
                    modalScopeClassName={sty["adminLoginModal__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "adminLoginModal",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "adminLoginModal",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lpueo
                        )}
                      />
                    }
                    trigger={
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__cMhet
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0Fcyb
                          )}
                        >
                          {"\u0648\u0631\u0648\u062f \u0645\u062f\u06cc\u0631"}
                        </div>
                      </AntdButton>
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mmYW)}
                    >
                      <AuthLoginComponent
                        data-plasmic-name={"loginComponent3"}
                        data-plasmic-override={overrides.loginComponent3}
                        className={classNames(
                          "__wab_instance",
                          sty.loginComponent3
                        )}
                        loginDetail={generateStateValueProp($state, [
                          "loginComponent3",
                          "loginDetail"
                        ])}
                        onLoginDetailChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "loginComponent3",
                            "loginDetail"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        roleProp={"admin"}
                      />
                    </div>
                  </AntdModal>
                </div>
              ) : null}
            </React.Fragment>
          }
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["drawer", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["drawer", "open"])}
          title={
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1IpRn
                )}
              >
                {""}
              </div>
              <LogoNoSvgIcon
                className={classNames(projectcss.all, sty.svg__xnfB)}
                role={"img"}
              />
            </React.Fragment>
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox__tNs5P)}>
            {(() => {
              try {
                return !!$$.me()?.token;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__hiOo0)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kczVz
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $$.me()?.user?.first_name
                          ? $$.me()?.user?.first_name +
                              " " +
                              $$.me()?.user?.last_name
                          : "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "--";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__vrU1M)}>
              <div
                data-plasmic-name={"hr2"}
                data-plasmic-override={overrides.hr2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.hr2
                )}
              >
                {""}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__cmVe)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHome"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHome"] != null &&
                  typeof $steps["goToHome"] === "object" &&
                  typeof $steps["goToHome"].then === "function"
                ) {
                  $steps["goToHome"] = await $steps["goToHome"];
                }

                $steps["updateDrawerOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["drawer", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDrawerOpen"] != null &&
                  typeof $steps["updateDrawerOpen"] === "object" &&
                  typeof $steps["updateDrawerOpen"].then === "function"
                ) {
                  $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
                }
              }}
            >
              <Icon12Icon
                className={classNames(projectcss.all, sty.svg__zGQli)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xLtAg
                )}
              >
                {"\u062e\u0627\u0646\u0647"}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__cx3Sf)}
              onClick={async event => {
                const $steps = {};

                $steps["goToChat"] = true
                  ? (() => {
                      const actionArgs = { destination: `/chat` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToChat"] != null &&
                  typeof $steps["goToChat"] === "object" &&
                  typeof $steps["goToChat"].then === "function"
                ) {
                  $steps["goToChat"] = await $steps["goToChat"];
                }

                $steps["updateDrawerOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["drawer", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDrawerOpen"] != null &&
                  typeof $steps["updateDrawerOpen"] === "object" &&
                  typeof $steps["updateDrawerOpen"].then === "function"
                ) {
                  $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
                }
              }}
            >
              <Icon14Icon
                className={classNames(projectcss.all, sty.svg___7Nyk)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jAegb
                )}
              >
                {
                  "\u06af\u0641\u062a\u200c\u0648\u06af\u0648 \u0628\u0627 \u0627\u0645\u0627\u0645 \u062c\u0645\u0627\u0639\u062a"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__r6TK8)}>
              <div
                data-plasmic-name={"hr"}
                data-plasmic-override={overrides.hr}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.hr
                )}
              >
                {""}
              </div>
            </div>
            {(() => {
              try {
                return !!$$.me()?.token;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__yQ4,
                  "cursor-pointer"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["logOut"] = true
                    ? (() => {
                        const actionArgs = { args: [] };
                        return $globalActions[
                          "AuthGlobalContext.logout"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["logOut"] != null &&
                    typeof $steps["logOut"] === "object" &&
                    typeof $steps["logOut"].then === "function"
                  ) {
                    $steps["logOut"] = await $steps["logOut"];
                  }

                  $steps["deleteLocalStorage"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              if (typeof window !== "undefined") {
                                return localStorage.removeItem("auth");
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["deleteLocalStorage"] != null &&
                    typeof $steps["deleteLocalStorage"] === "object" &&
                    typeof $steps["deleteLocalStorage"].then === "function"
                  ) {
                    $steps["deleteLocalStorage"] = await $steps[
                      "deleteLocalStorage"
                    ];
                  }

                  $steps["successNotification"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "success",
                            "\u062e\u0631\u0648\u062c \u0627\u0632 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["successNotification"] != null &&
                    typeof $steps["successNotification"] === "object" &&
                    typeof $steps["successNotification"].then === "function"
                  ) {
                    $steps["successNotification"] = await $steps[
                      "successNotification"
                    ];
                  }

                  $steps["updateDrawerOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["drawer", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDrawerOpen"] != null &&
                    typeof $steps["updateDrawerOpen"] === "object" &&
                    typeof $steps["updateDrawerOpen"].then === "function"
                  ) {
                    $steps["updateDrawerOpen"] = await $steps[
                      "updateDrawerOpen"
                    ];
                  }
                }}
              >
                <Icon13Icon
                  className={classNames(projectcss.all, sty.svg__sh4QO)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rG4E,
                    "cursor-pointer"
                  )}
                >
                  {
                    "\u062e\u0631\u0648\u062c \u0627\u0632 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc\n"
                  }
                </div>
              </div>
            ) : null}
            {(() => {
              try {
                return !$$.me()?.token;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__bMoks)}
                onClick={async event => {
                  const $steps = {};
                }}
              >
                <AntdModal
                  data-plasmic-name={"loginModalDrawer"}
                  data-plasmic-override={overrides.loginModalDrawer}
                  className={classNames("__wab_instance", sty.loginModalDrawer)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  footer={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tNgi)}
                    />
                  }
                  modalScopeClassName={sty["loginModalDrawer__modal"]}
                  onCancel={async () => {
                    const $steps = {};

                    $steps["updateLoginModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loginModalDrawer", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginModalOpen"] != null &&
                      typeof $steps["updateLoginModalOpen"] === "object" &&
                      typeof $steps["updateLoginModalOpen"].then === "function"
                    ) {
                      $steps["updateLoginModalOpen"] = await $steps[
                        "updateLoginModalOpen"
                      ];
                    }
                  }}
                  onOk={async () => {
                    const $steps = {};
                  }}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "loginModalDrawer",
                      "open"
                    ]).apply(null, eventArgs);

                    (async open => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  open={generateStateValueProp($state, [
                    "loginModalDrawer",
                    "open"
                  ])}
                  title={null}
                  trigger={
                    <AntdButton
                      className={classNames("__wab_instance", sty.button__ulUh)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__opZ7F
                        )}
                      >
                        {
                          "\u0648\u0631\u0648\u062f \u0628\u0647 \u0646\u0648\u062c\u0647\u0627\u0646"
                        }
                      </div>
                    </AntdButton>
                  }
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lsqEy)}
                  >
                    <AuthLoginComponent
                      data-plasmic-name={"loginComponent2"}
                      data-plasmic-override={overrides.loginComponent2}
                      className={classNames(
                        "__wab_instance",
                        sty.loginComponent2
                      )}
                      loginDetail={generateStateValueProp($state, [
                        "loginComponent2",
                        "loginDetail"
                      ])}
                      onLoginDetailChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "loginComponent2",
                          "loginDetail"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    />
                  </div>
                </AntdModal>
              </div>
            ) : null}
          </div>
        </AntdDrawer>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__lgNkc)}>
        <LogoNoSvgIcon
          className={classNames(projectcss.all, sty.svg__nGD6)}
          role={"img"}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__wqt6Z)}>
        <AntdModal
          data-plasmic-name={"loginModal"}
          data-plasmic-override={overrides.loginModal}
          className={classNames("__wab_instance", sty.loginModal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          footer={
            <div className={classNames(projectcss.all, sty.freeBox__xplnr)} />
          }
          modalScopeClassName={sty["loginModal__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["loginModal", "open"]).apply(
              null,
              eventArgs
            );

            (async open => {
              const $steps = {};

              $steps["updateLoginModalOpen"] = !!$state?.auth?.token
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loginModal", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoginModalOpen"] != null &&
                typeof $steps["updateLoginModalOpen"] === "object" &&
                typeof $steps["updateLoginModalOpen"].then === "function"
              ) {
                $steps["updateLoginModalOpen"] = await $steps[
                  "updateLoginModalOpen"
                ];
              }
            }).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["loginModal", "open"])}
          title={null}
          trigger={
            (() => {
              try {
                return !$$.me()?.token;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <AntdButton
                className={classNames("__wab_instance", sty.button__z7LUs)}
                onClick={async () => {
                  const $steps = {};
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__liy17
                  )}
                >
                  {"\u0648\u0631\u0648\u062f"}
                </div>
              </AntdButton>
            ) : null
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox__cU1S7)}>
            <AuthLoginComponent
              data-plasmic-name={"loginComponent"}
              data-plasmic-override={overrides.loginComponent}
              className={classNames("__wab_instance", sty.loginComponent)}
              isLoginSuccessFn={async isLogin => {
                const $steps = {};

                $steps["updateLoginModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loginModal", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoginModalOpen"] != null &&
                  typeof $steps["updateLoginModalOpen"] === "object" &&
                  typeof $steps["updateLoginModalOpen"].then === "function"
                ) {
                  $steps["updateLoginModalOpen"] = await $steps[
                    "updateLoginModalOpen"
                  ];
                }
              }}
              loginDetail={generateStateValueProp($state, [
                "loginComponent",
                "loginDetail"
              ])}
              onLoginDetailChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "loginComponent",
                  "loginDetail"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          </div>
        </AntdModal>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "drawer",
    "hr2",
    "hr",
    "loginModalDrawer",
    "loginComponent2",
    "adminLoginModal",
    "loginComponent3",
    "loginModal",
    "loginComponent"
  ],
  drawer: [
    "drawer",
    "hr2",
    "hr",
    "loginModalDrawer",
    "loginComponent2",
    "adminLoginModal",
    "loginComponent3"
  ],
  hr2: ["hr2"],
  hr: ["hr"],
  loginModalDrawer: ["loginModalDrawer", "loginComponent2"],
  loginComponent2: ["loginComponent2"],
  adminLoginModal: ["adminLoginModal", "loginComponent3"],
  loginComponent3: ["loginComponent3"],
  loginModal: ["loginModal", "loginComponent"],
  loginComponent: ["loginComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  drawer: typeof AntdDrawer;
  hr2: "div";
  hr: "div";
  loginModalDrawer: typeof AntdModal;
  loginComponent2: typeof AuthLoginComponent;
  adminLoginModal: typeof AntdModal;
  loginComponent3: typeof AuthLoginComponent;
  loginModal: typeof AntdModal;
  loginComponent: typeof AuthLoginComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCoreHeaderMainHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCoreHeaderMainHeader__VariantsArgs;
    args?: PlasmicCoreHeaderMainHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCoreHeaderMainHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCoreHeaderMainHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCoreHeaderMainHeader__ArgProps,
          internalVariantPropNames: PlasmicCoreHeaderMainHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCoreHeaderMainHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCoreHeaderMainHeader";
  } else {
    func.displayName = `PlasmicCoreHeaderMainHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicCoreHeaderMainHeader = Object.assign(
  // Top-level PlasmicCoreHeaderMainHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    drawer: makeNodeComponent("drawer"),
    hr2: makeNodeComponent("hr2"),
    hr: makeNodeComponent("hr"),
    loginModalDrawer: makeNodeComponent("loginModalDrawer"),
    loginComponent2: makeNodeComponent("loginComponent2"),
    adminLoginModal: makeNodeComponent("adminLoginModal"),
    loginComponent3: makeNodeComponent("loginComponent3"),
    loginModal: makeNodeComponent("loginModal"),
    loginComponent: makeNodeComponent("loginComponent"),

    // Metadata about props expected for PlasmicCoreHeaderMainHeader
    internalVariantProps: PlasmicCoreHeaderMainHeader__VariantProps,
    internalArgProps: PlasmicCoreHeaderMainHeader__ArgProps
  }
);

export default PlasmicCoreHeaderMainHeader;
/* prettier-ignore-end */
