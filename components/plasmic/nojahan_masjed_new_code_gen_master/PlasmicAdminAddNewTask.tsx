// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: sUOGL7yBlxF-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import CoreHeaderAdminHeader from "../../CoreHeaderAdminHeader"; // plasmic-import: ZTGMlsvVVp1c/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Label from "../../Label"; // plasmic-import: Q6PUMnlRXK0C/component
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicAdminAddNewTask.module.css"; // plasmic-import: sUOGL7yBlxF-/css

createPlasmicElementProxy;

export type PlasmicAdminAddNewTask__VariantMembers = {};
export type PlasmicAdminAddNewTask__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminAddNewTask__VariantsArgs;
export const PlasmicAdminAddNewTask__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAdminAddNewTask__ArgsType = {};
type ArgPropType = keyof PlasmicAdminAddNewTask__ArgsType;
export const PlasmicAdminAddNewTask__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminAddNewTask__OverridesType = {
  root?: Flex__<"div">;
  coreHeaderAdminHeader?: Flex__<typeof CoreHeaderAdminHeader>;
  freeBox?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  addTask?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  label?: Flex__<typeof Label>;
  richTextEditor?: Flex__<typeof Quill>;
  select?: Flex__<typeof AntdSelect>;
  select2?: Flex__<typeof AntdSelect>;
  select3?: Flex__<typeof AntdSelect>;
  select4?: Flex__<typeof AntdSelect>;
};

export interface DefaultAdminAddNewTaskProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminAddNewTask__RenderFunc(props: {
  variants: PlasmicAdminAddNewTask__VariantsArgs;
  args: PlasmicAdminAddNewTask__ArgsType;
  overrides: PlasmicAdminAddNewTask__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "auth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("AuthorizationDetail"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "addTask.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "addTask",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "addTask.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "addTask",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "richTextEditor.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAdminAddNewTask.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAdminAddNewTask.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAdminAddNewTask.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <CoreHeaderAdminHeader
            data-plasmic-name={"coreHeaderAdminHeader"}
            data-plasmic-override={overrides.coreHeaderAdminHeader}
            className={classNames("__wab_instance", sty.coreHeaderAdminHeader)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
            dir={"rtl"}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);

                  (async (changedValues, allValues) => {
                    const $steps = {};
                  }).apply(null, eventArgs);
                },
                formItems: undefined,
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: undefined,
                onFinish: async values => {
                  const $steps = {};

                  $steps["defaultSubmit"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "hfKFoF6NHFakDLEE3BFPLz",
                            opId: "a3233a38-c4a3-4194-90a4-291e6aeb5f5e",
                            userArgs: {
                              params: [$ctx.params.activityId],
                              headers: [$state.auth.token],
                              body: [undefined]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["defaultSubmit"] != null &&
                    typeof $steps["defaultSubmit"] === "object" &&
                    typeof $steps["defaultSubmit"].then === "function"
                  ) {
                    $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                  }
                },
                onFinishFailed: async data => {
                  const $steps = {};
                },
                onIsSubmittingChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["form"] = ref;
                },
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__aukDb
                    )}
                    hidden={true}
                    initialValue={undefined}
                    label={"id"}
                    name={"id"}
                  >
                    <AntdInputNumber
                      className={classNames(
                        "__wab_instance",
                        sty.numberInput__qLYlz
                      )}
                      type={"number"}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__oqvk0
                    )}
                    initialValue={undefined}
                    label={
                      "\u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u0626\u0648\u0644\u06cc\u062a"
                    }
                    name={"title"}
                  >
                    <AntdInput
                      className={classNames("__wab_instance", sty.input__ctMwC)}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__plMz
                    )}
                    initialValue={undefined}
                    label={"\u062a\u0648\u0636\u06cc\u062d\u0627\u062a"}
                    name={"description"}
                    noLabel={false}
                  >
                    <AntdTextArea
                      className={classNames(
                        "__wab_instance",
                        sty.textArea__dFdYa
                      )}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__t2Mco
                    )}
                    label={
                      "\u0645\u062a\u0646 \u0631\u0627\u0647\u0646\u0645\u0627"
                    }
                    name={"help"}
                    noLabel={false}
                  >
                    <AntdTextArea
                      className={classNames(
                        "__wab_instance",
                        sty.textArea__tih4L
                      )}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___04C7Q
                    )}
                    hidden={true}
                    initialValue={(() => {
                      try {
                        return `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"created_at"}
                    name={"created_at"}
                  >
                    <AntdInput
                      className={classNames("__wab_instance", sty.input__b2I32)}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___14Cts
                    )}
                    hidden={true}
                    initialValue={"active"}
                    label={"\u0648\u0636\u0639\u06cc\u062a"}
                    name={"status"}
                  >
                    <AntdSelect
                      className={classNames(
                        "__wab_instance",
                        sty.select__kJocr
                      )}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      options={(() => {
                        const __composite = [
                          { type: null, label: null, value: null },
                          { type: null, label: null, value: null }
                        ];
                        __composite["0"]["type"] = "option";
                        __composite["0"]["label"] =
                          "\u0645\u0646\u062a\u0634\u0631";
                        __composite["0"]["value"] = "active";
                        __composite["1"]["type"] = "option";
                        __composite["1"]["label"] =
                          "\u067e\u06cc\u0634\u0646\u0648\u06cc\u0633";
                        __composite["1"]["value"] = "inactive";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select__kJocr__popup"]}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__xE0Sf
                    )}
                    hidden={true}
                    initialValue={5}
                    label={"user_id"}
                    name={"user_id"}
                  >
                    <AntdInputNumber
                      className={classNames(
                        "__wab_instance",
                        sty.numberInput___0Xjq0
                      )}
                      type={"number"}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__klOd5
                    )}
                    hidden={true}
                    initialValue={5}
                    label={"creator"}
                    name={"creator"}
                  >
                    <AntdInputNumber
                      className={classNames(
                        "__wab_instance",
                        sty.numberInput__hqs6G
                      )}
                      type={"number"}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__kfCob
                    )}
                    hidden={true}
                    initialValue={1}
                    label={"masjed_id"}
                    name={"masjed_id"}
                  >
                    <AntdInputNumber
                      className={classNames(
                        "__wab_instance",
                        sty.numberInput__ih1Be
                      )}
                      type={"number"}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__dunKs
                    )}
                    initialValue={``}
                    label={
                      "\u0632\u0645\u0627\u0646 \u0627\u0646\u062c\u0627\u0645"
                    }
                    name={"time"}
                  >
                    <AntdSelect
                      className={classNames(
                        "__wab_instance",
                        sty.select__q7OAi
                      )}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] = "\u0635\u0628\u062d";
                        __composite["0"]["value"] = "\u0635\u0628\u062d";
                        __composite["1"]["label"] = "\u0638\u0647\u0631";
                        __composite["1"]["value"] = "\u0638\u0647\u0631";
                        __composite["2"]["label"] = "\u0639\u0635\u0631";
                        __composite["2"]["value"] = "\u0639\u0635\u0631";
                        __composite["3"]["label"] = "\u0645\u063a\u0631\u0628";
                        __composite["3"]["value"] = "\u0645\u063a\u0631\u0628";
                        __composite["4"]["label"] = "\u0639\u0634\u0627\u0621";
                        __composite["4"]["value"] = "\u0639\u0634\u0627\u0621";
                        __composite["5"]["label"] = "\u0622\u0632\u0627\u062f";
                        __composite["5"]["value"] = "\u0622\u0632\u0627\u062f";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select__q7OAi__popup"]}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___69X9J
                    )}
                    label={
                      "\u0645\u0646\u0627\u0633\u0628 \u0628\u0631\u0627\u06cc"
                    }
                    name={"age_id"}
                  >
                    <AntdSelect
                      className={classNames(
                        "__wab_instance",
                        sty.select___8RYr
                      )}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] =
                          "\u0646\u0648\u0646\u0647\u0627\u0644\u0627\u0646";
                        __composite["0"]["value"] = "1";
                        __composite["1"]["label"] =
                          "\u0646\u0648\u062c\u0648\u0627\u0646\u0627\u0646";
                        __composite["1"]["value"] = "2";
                        __composite["2"]["label"] =
                          "\u062c\u0648\u0627\u0646\u0627\u0646";
                        __composite["2"]["value"] = "3";
                        __composite["3"]["label"] =
                          "\u0628\u0632\u0631\u06af\u0633\u0627\u0644\u0627\u0646";
                        __composite["3"]["value"] = "4";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select___8RYr__popup"]}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__quQfa
                    )}
                    label={"\u062c\u0646\u0633\u06cc\u062a"}
                    name={"gender"}
                  >
                    <AntdSelect
                      className={classNames(
                        "__wab_instance",
                        sty.select__nkl5S
                      )}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] =
                          "\u0645\u0631\u062f\u0627\u0646\u0647";
                        __composite["0"]["value"] = "male";
                        __composite["1"]["label"] =
                          "\u0632\u0646\u0627\u0646\u0647";
                        __composite["1"]["value"] = "female";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select__nkl5S__popup"]}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__qSipi
                    )}
                    hidden={true}
                    initialValue={(() => {
                      try {
                        return $ctx.params.activityId;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"activity_id"}
                    name={"activity_id"}
                  >
                    <AntdInput
                      className={classNames("__wab_instance", sty.input__aETdf)}
                    />
                  </FormItemWrapper>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button___1HJ7)}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kgELo
                      )}
                    >
                      {
                        "\u062b\u0628\u062a \u0645\u0633\u0626\u0648\u0644\u06cc\u062a"
                      }
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.addTask),
                extendedOnValuesChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["addTask", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};

                  $steps["httpPut"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "hfKFoF6NHFakDLEE3BFPLz",
                            opId: "27301c1c-5676-46cc-9fc9-2393a408522f",
                            userArgs: {
                              body: [
                                $state.addTask.value.title,
                                $state.addTask.value.description,
                                $state.addTask.value.status,
                                $state.addTask.value.time,
                                $state.addTask.value.age_id,
                                $state.addTask.value.gender,
                                $state.richTextEditor.value,
                                $ctx.params.activityId
                              ],
                              headers: [$state.auth.token]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["httpPut"] != null &&
                    typeof $steps["httpPut"] === "object" &&
                    typeof $steps["httpPut"].then === "function"
                  ) {
                    $steps["httpPut"] = await $steps["httpPut"];
                  }

                  $steps["refreshData"] = true
                    ? (() => {
                        const actionArgs = {
                          queryInvalidation: [
                            "9ec0fd75-a140-43f2-97e3-0e4df8bc180d"
                          ]
                        };
                        return (async ({ queryInvalidation }) => {
                          if (!queryInvalidation) {
                            return;
                          }
                          await plasmicInvalidate(queryInvalidation);
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["refreshData"] != null &&
                    typeof $steps["refreshData"] === "object" &&
                    typeof $steps["refreshData"].then === "function"
                  ) {
                    $steps["refreshData"] = await $steps["refreshData"];
                  }

                  $steps["goToAdminTasks"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/admin/${(() => {
                            try {
                              return $ctx.params.activityId;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/tasks`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToAdminTasks"] != null &&
                    typeof $steps["goToAdminTasks"] === "object" &&
                    typeof $steps["goToAdminTasks"].then === "function"
                  ) {
                    $steps["goToAdminTasks"] = await $steps["goToAdminTasks"];
                  }
                },
                onIsSubmittingChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["addTask", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["addTask"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "addTask.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "addTask.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"addTask"}
                  data-plasmic-override={overrides.addTask}
                  {...child$Props}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___9QFiF
                    )}
                    initialValue={``}
                    label={
                      "\u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u0626\u0648\u0644\u06cc\u062a"
                    }
                    name={"title"}
                    rules={[
                      {
                        ruleType: "required",
                        message:
                          "\u0641\u06cc\u0644\u062f \u0636\u0631\u0648\u0631\u06cc"
                      }
                    ]}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__jnhv3
                    )}
                    initialValue={``}
                    label={"\u062a\u0648\u0636\u06cc\u062d\u0627\u062a"}
                    name={"description"}
                    rules={[
                      {
                        ruleType: "required",
                        message:
                          "\u0641\u06cc\u0644\u062f \u0636\u0631\u0648\u0631\u06cc"
                      }
                    ]}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input2),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input2.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input2"}
                          data-plasmic-override={overrides.input2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <Label
                    data-plasmic-name={"label"}
                    data-plasmic-override={overrides.label}
                    className={classNames("__wab_instance", sty.label)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Zmo8
                      )}
                    >
                      {
                        "\u0645\u062a\u0646 \u0631\u0627\u0647\u0646\u0645\u0627"
                      }
                    </div>
                  </Label>
                  {(() => {
                    const child$Props = {
                      containerClassName: classNames(
                        "__wab_instance",
                        sty.richTextEditor
                      ),
                      defaultValue: ``,
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["richTextEditor", "value"],
                          Quill_Helpers
                        ).apply(null, eventArgs);
                      },
                      preserveWhitespace: true,
                      readOnly: false,
                      toolbar: {
                        textStyle: [
                          "bold",
                          "italic",
                          "underline",
                          "strikethrough"
                        ],
                        colors: ["text color", "text background"],
                        script: true,
                        fontFamily: true,
                        heading: [
                          "Heading 1",
                          "Heading 2",
                          "Heading 3",
                          "Heading 4",
                          "Heading 5",
                          "Heading 6",
                          "Body"
                        ],
                        fontSizes: ["small", "medium", "large", "huge"],
                        formatting: [
                          "alignment",
                          "list",
                          "indentation",
                          "text direction",
                          "clear formatting"
                        ],
                        inputTypes: [
                          "link",
                          "blockquote",
                          "image",
                          "video",
                          "code-block",
                          "formula"
                        ]
                      },
                      value: generateStateValueProp($state, [
                        "richTextEditor",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "richTextEditor.value"
                        }
                      ],
                      [],
                      Quill_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <Quill
                        data-plasmic-name={"richTextEditor"}
                        data-plasmic-override={overrides.richTextEditor}
                        {...child$Props}
                      />
                    );
                  })()}
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__ko8Hr
                    )}
                    initialValue={"\u0635\u0628\u062d"}
                    label={
                      "\u0632\u0645\u0627\u0646 \u0627\u0646\u062c\u0627\u0645"
                    }
                    name={"time"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] = "\u0635\u0628\u062d";
                        __composite["0"]["value"] = "\u0635\u0628\u062d";
                        __composite["1"]["label"] = "\u0638\u0647\u0631";
                        __composite["1"]["value"] = "\u0638\u0647\u0631";
                        __composite["2"]["label"] = "\u0639\u0635\u0631";
                        __composite["2"]["value"] = "\u0639\u0635\u0631";
                        __composite["3"]["label"] = "\u0645\u063a\u0631\u0628";
                        __composite["3"]["value"] = "\u0645\u063a\u0631\u0628";
                        __composite["4"]["label"] = "\u0639\u0634\u0627\u0621";
                        __composite["4"]["value"] = "\u0639\u0634\u0627\u0621";
                        __composite["5"]["label"] = "\u0622\u0632\u0627\u062f";
                        __composite["5"]["value"] = "\u0622\u0632\u0627\u062f";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select__popup"]}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___5M0Gn
                    )}
                    initialValue={"1"}
                    label={
                      "\u0645\u0646\u0627\u0633\u0628 \u0628\u0631\u0627\u06cc"
                    }
                    name={"age_id"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      className={classNames("__wab_instance", sty.select2)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select2",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] =
                          "\u0646\u0648\u0646\u0647\u0627\u0644\u0627\u0646";
                        __composite["0"]["value"] = "1";
                        __composite["1"]["label"] =
                          "\u0646\u0648\u062c\u0648\u0627\u0646\u0627\u0646";
                        __composite["1"]["value"] = "2";
                        __composite["2"]["label"] =
                          "\u062c\u0648\u0627\u0646\u0627\u0646";
                        __composite["2"]["value"] = "3";
                        __composite["3"]["label"] =
                          "\u0628\u0632\u0631\u06af\u0633\u0627\u0644\u0627\u0646";
                        __composite["3"]["value"] = "4";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select2__popup"]}
                      value={generateStateValueProp($state, [
                        "select2",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__uuNh7
                    )}
                    initialValue={"male"}
                    label={"\u062c\u0646\u0633\u06cc\u062a"}
                    name={"gender"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select3"}
                      data-plasmic-override={overrides.select3}
                      className={classNames("__wab_instance", sty.select3)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select3",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] =
                          "\u0645\u0631\u062f\u0627\u0646\u0647";
                        __composite["0"]["value"] = "male";
                        __composite["1"]["label"] =
                          "\u0632\u0646\u0627\u0646\u0647";
                        __composite["1"]["value"] = "female";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select3__popup"]}
                      value={generateStateValueProp($state, [
                        "select3",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__ucUw
                    )}
                    initialValue={"active"}
                    label={
                      "\u0648\u0636\u0639\u06cc\u062a \u0627\u0646\u062a\u0634\u0627\u0631"
                    }
                    name={"status"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select4"}
                      data-plasmic-override={overrides.select4}
                      className={classNames("__wab_instance", sty.select4)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select4",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] =
                          "\u0645\u0646\u062a\u0634\u0631 \u0634\u062f\u0647";
                        __composite["0"]["value"] = "active";
                        __composite["1"]["label"] =
                          "\u0628\u0627\u06cc\u06af\u0627\u0646\u06cc";
                        __composite["1"]["value"] = "disabled";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select4__popup"]}
                      value={generateStateValueProp($state, [
                        "select4",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__dGmpp)}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hHjz0
                      )}
                    >
                      {
                        "\u062b\u0628\u062a \u0645\u0633\u0626\u0648\u0644\u06cc\u062a"
                      }
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "coreHeaderAdminHeader",
    "freeBox",
    "form",
    "addTask",
    "input",
    "input2",
    "label",
    "richTextEditor",
    "select",
    "select2",
    "select3",
    "select4"
  ],
  coreHeaderAdminHeader: ["coreHeaderAdminHeader"],
  freeBox: [
    "freeBox",
    "form",
    "addTask",
    "input",
    "input2",
    "label",
    "richTextEditor",
    "select",
    "select2",
    "select3",
    "select4"
  ],
  form: ["form"],
  addTask: [
    "addTask",
    "input",
    "input2",
    "label",
    "richTextEditor",
    "select",
    "select2",
    "select3",
    "select4"
  ],
  input: ["input"],
  input2: ["input2"],
  label: ["label"],
  richTextEditor: ["richTextEditor"],
  select: ["select"],
  select2: ["select2"],
  select3: ["select3"],
  select4: ["select4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  coreHeaderAdminHeader: typeof CoreHeaderAdminHeader;
  freeBox: "div";
  form: typeof FormWrapper;
  addTask: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  label: typeof Label;
  richTextEditor: typeof Quill;
  select: typeof AntdSelect;
  select2: typeof AntdSelect;
  select3: typeof AntdSelect;
  select4: typeof AntdSelect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminAddNewTask__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminAddNewTask__VariantsArgs;
    args?: PlasmicAdminAddNewTask__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminAddNewTask__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdminAddNewTask__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminAddNewTask__ArgProps,
          internalVariantPropNames: PlasmicAdminAddNewTask__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminAddNewTask__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminAddNewTask";
  } else {
    func.displayName = `PlasmicAdminAddNewTask.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminAddNewTask = Object.assign(
  // Top-level PlasmicAdminAddNewTask renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    coreHeaderAdminHeader: makeNodeComponent("coreHeaderAdminHeader"),
    freeBox: makeNodeComponent("freeBox"),
    form: makeNodeComponent("form"),
    addTask: makeNodeComponent("addTask"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    label: makeNodeComponent("label"),
    richTextEditor: makeNodeComponent("richTextEditor"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),
    select4: makeNodeComponent("select4"),

    // Metadata about props expected for PlasmicAdminAddNewTask
    internalVariantProps: PlasmicAdminAddNewTask__VariantProps,
    internalArgProps: PlasmicAdminAddNewTask__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Add new task",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminAddNewTask;
/* prettier-ignore-end */
