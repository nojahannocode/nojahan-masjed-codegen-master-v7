// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: mXkNsut3n5tQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import CoreHeaderAdminHeader from "../../CoreHeaderAdminHeader"; // plasmic-import: ZTGMlsvVVp1c/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import TaskCardActivitie from "../../TaskCardActivitie"; // plasmic-import: 8x-tDBj79ns0/component
import { DatePicker } from "@/angel/date-picker"; // plasmic-import: koiF6B3Ak70B/codeComponent
import { TimePicker } from "@/angel/time-picker"; // plasmic-import: y3_mmDdIpKkL/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicAdminActivityTest.module.css"; // plasmic-import: mXkNsut3n5tQ/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: XASChn-p69Is/icon

createPlasmicElementProxy;

export type PlasmicAdminActivityTest__VariantMembers = {};
export type PlasmicAdminActivityTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminActivityTest__VariantsArgs;
export const PlasmicAdminActivityTest__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAdminActivityTest__ArgsType = {};
type ArgPropType = keyof PlasmicAdminActivityTest__ArgsType;
export const PlasmicAdminActivityTest__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminActivityTest__OverridesType = {
  root?: Flex__<"div">;
  coreHeaderAdminHeader?: Flex__<typeof CoreHeaderAdminHeader>;
  modal?: Flex__<typeof AntdModal>;
  formAddActivity?: Flex__<typeof FormWrapper>;
  svg?: Flex__<"svg">;
  datePicker?: Flex__<typeof DatePicker>;
  timePicker2?: Flex__<typeof TimePicker>;
};

export interface DefaultAdminActivityTestProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminActivityTest__RenderFunc(props: {
  variants: PlasmicAdminActivityTest__VariantsArgs;
  args: PlasmicAdminActivityTest__ArgsType;
  overrides: PlasmicAdminActivityTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formAddActivity.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formAddActivity",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formAddActivity.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formAddActivity",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "auth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("AuthorizationDetail"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "datePicker.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datePicker.values",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "datePicker.month",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datePicker.year",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "10:20"
      },
      {
        path: "test",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getListInactiveActivity: usePlasmicDataOp(() => {
      return {
        sourceId: "hfKFoF6NHFakDLEE3BFPLz",
        opId: "d71d925a-4b23-479f-afdc-ba4e2b15733b",
        userArgs: {
          headers: [$state.auth.token]
        },
        cacheKey: `plasmic.$.d71d925a-4b23-479f-afdc-ba4e2b15733b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getListActiveActivities: usePlasmicDataOp(() => {
      return {
        sourceId: "hfKFoF6NHFakDLEE3BFPLz",
        opId: "2f8375ba-fc2e-4493-8d31-0f9451911289",
        userArgs: {
          headers: [$state.auth.token]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.2f8375ba-fc2e-4493-8d31-0f9451911289.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <CoreHeaderAdminHeader
            data-plasmic-name={"coreHeaderAdminHeader"}
            data-plasmic-override={overrides.coreHeaderAdminHeader}
            className={classNames("__wab_instance", sty.coreHeaderAdminHeader)}
          />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__dCkfn)} />
            }
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={
              <AntdButton
                className={classNames("__wab_instance", sty.button___1Cm)}
              >
                <Icon16Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </AntdButton>
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__hegqt)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.formAddActivity),
                  data: {
                    sourceId: "ot1VBi9vFtFD1mbkPrDZdA",
                    opId: "ec5905b9-d54f-43df-b8ed-a6c99887f21b",
                    userArgs: {},
                    cacheKey: `plasmic.$.${(() => {
                      try {
                        return "getSchema";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}.$.oGYjdChFIXU7.$.ec5905b9-d54f-43df-b8ed-a6c99887f21b.$.`,
                    invalidatedKeys: null,
                    roleId: null
                  },
                  dataFormItems: (() => {
                    const __composite = [
                      {
                        key: "id",
                        inputType: "Number",
                        fieldId: "id",
                        label: "id",
                        name: "id",
                        hidden: null
                      },
                      {
                        key: "name",
                        inputType: "Text",
                        fieldId: "name",
                        label: null,
                        name: "name",
                        rules: null
                      },
                      {
                        key: "gender",
                        inputType: null,
                        fieldId: "gender",
                        label: null,
                        name: "gender",
                        initialValue: null,
                        options: null
                      },
                      {
                        key: "start_date",
                        inputType: "Text",
                        fieldId: "start_date",
                        label: "start_date",
                        name: "start_date",
                        hidden: null
                      },
                      {
                        key: "status",
                        inputType: null,
                        fieldId: "status",
                        label: null,
                        name: "status",
                        initialValue: null,
                        options: null
                      },
                      {
                        key: "end_date",
                        inputType: "Text",
                        fieldId: "end_date",
                        label: "end_date",
                        name: "end_date",
                        hidden: null
                      }
                    ];
                    __composite["0"]["hidden"] = true;
                    __composite["1"]["label"] =
                      "\u0646\u0627\u0645 \u0641\u0639\u0627\u0644\u06cc\u062a";
                    __composite["1"]["rules"] = [
                      {
                        ruleType: "max",
                        length: 20,
                        message:
                          "\u0646\u0627\u0645 \u0627\u0646\u062a\u062e\u0627\u0628\u06cc \u0634\u0645\u0627 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 20 \u06a9\u0627\u0631\u0627\u06a9\u062a\u0631 \u0645\u06cc\u200c\u0628\u0627\u0634\u062f."
                      }
                    ];

                    __composite["2"]["inputType"] = "Select";
                    __composite["2"]["label"] =
                      "\u062c\u0646\u0633\u06cc\u062a";
                    __composite["2"]["initialValue"] = "male";
                    __composite["2"]["options"] = (() => {
                      const __composite = [
                        { type: "option", label: null, value: null },
                        { type: "option", label: null, value: null },
                        { type: "option", label: null, value: null }
                      ];
                      __composite["0"]["label"] = "\u0645\u0631\u062f";
                      __composite["0"]["value"] = "male";
                      __composite["1"]["label"] = "\u0632\u0646";
                      __composite["1"]["value"] = "female";
                      __composite["2"]["label"] = "\u0647\u0631\u062f\u0648";
                      __composite["2"]["value"] = "both";
                      return __composite;
                    })();
                    __composite["3"]["hidden"] = true;
                    __composite["4"]["inputType"] = "Select";
                    __composite["4"]["label"] =
                      "\u0648\u0636\u0639\u06cc\u062a";
                    __composite["4"]["initialValue"] = "active";
                    __composite["4"]["options"] = (() => {
                      const __composite = [
                        { type: "option", label: null, value: null },
                        { type: "option", label: null, value: null }
                      ];
                      __composite["0"]["label"] =
                        "\u062f\u0631 \u062c\u0631\u06cc\u0627\u0646";
                      __composite["0"]["value"] = "active";
                      __composite["1"]["label"] =
                        "\u067e\u06cc\u0634\u200c\u0646\u0648\u06cc\u0633";
                      __composite["1"]["value"] = "inactive";
                      return __composite;
                    })();
                    __composite["5"]["hidden"] = true;
                    return __composite;
                  })(),

                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["formAddActivity", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: [],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "simplified",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["defaultSubmit"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "hfKFoF6NHFakDLEE3BFPLz",
                              opId: "5e0b4aea-d1aa-4753-9a1a-30a2ad53612c",
                              userArgs: {
                                headers: [$state.auth.token],
                                body: [
                                  $state.formAddActivity.value.name,
                                  $state.formAddActivity.value.gender,
                                  $state.formAddActivity.value.status
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: [
                                "2f8375ba-fc2e-4493-8d31-0f9451911289",
                                "d71d925a-4b23-479f-afdc-ba4e2b15733b"
                              ],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["defaultSubmit"] != null &&
                      typeof $steps["defaultSubmit"] === "object" &&
                      typeof $steps["defaultSubmit"].then === "function"
                    ) {
                      $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                    }

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }

                    $steps["updateModalOpen2"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "formAddActivity",
                            action: "resetFields"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen2"] != null &&
                      typeof $steps["updateModalOpen2"] === "object" &&
                      typeof $steps["updateModalOpen2"].then === "function"
                    ) {
                      $steps["updateModalOpen2"] = await $steps[
                        "updateModalOpen2"
                      ];
                    }
                  },
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["formAddActivity", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["formAddActivity"] = ref;
                  },
                  submitSlot: (
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__rUm2B
                      )}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iFbsz
                        )}
                      >
                        {
                          "\u062b\u0628\u062a \u0641\u0639\u0627\u0644\u06cc\u062a"
                        }
                      </div>
                    </AntdButton>
                  ),
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "formAddActivity.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "formAddActivity.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"formAddActivity"}
                    data-plasmic-override={overrides.formAddActivity}
                    {...child$Props}
                  />
                );
              })()}
            </div>
          </AntdModal>
          <div className={classNames(projectcss.all, sty.freeBox__ru)}>
            <div className={classNames(projectcss.all, sty.freeBox__lB3BJ)}>
              <div className={classNames(projectcss.all, sty.freeBox___7He1K)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uCe7K
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0641\u0639\u0627\u0644\u06cc\u062a\u200c\u0647\u0627\u06cc \u062f\u0631\u062c\u0631\u06cc\u0627\u0646"
                      }
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___4IqfK)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.getListActiveActivities.data.response;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <TaskCardActivitie
                      className={classNames(
                        "__wab_instance",
                        sty.taskCardActivitie__ahPzj
                      )}
                      gender={(() => {
                        try {
                          return currentItem.gender;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      id={(() => {
                        try {
                          return currentItem.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      name={(() => {
                        try {
                          return currentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      numberTask={(() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      status={(() => {
                        try {
                          return currentItem.status;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dsVms)}>
              <div className={classNames(projectcss.all, sty.freeBox__cy3Kw)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bnCcG
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0641\u0639\u0627\u0644\u06cc\u062a\u200c\u0647\u0627\u06cc \u067e\u06cc\u0634\u200c\u0646\u0648\u06cc\u0633"
                      }
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kMtrs)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.getListInactiveActivity.data.response;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <TaskCardActivitie
                      className={classNames(
                        "__wab_instance",
                        sty.taskCardActivitie__lYkcU
                      )}
                      gender={(() => {
                        try {
                          return currentItem.gender;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      id={(() => {
                        try {
                          return currentItem.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      name={(() => {
                        try {
                          return currentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      numberTask={undefined}
                      status={(() => {
                        try {
                          return currentItem.status;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </div>
            </div>
          </div>
          <DatePicker
            data-plasmic-name={"datePicker"}
            data-plasmic-override={overrides.datePicker}
            className={classNames("__wab_instance", sty.datePicker)}
            customDayCell={false}
            holidays={[]}
            locale={"fa"}
            mode={"single"}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["datePicker", "value"]).apply(
                null,
                eventArgs
              );
              generateStateOnChangeProp($state, ["datePicker", "values"]).apply(
                null,
                eventArgs
              );

              (async date => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return console.log($state.datePicker.value);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }).apply(null, eventArgs);
            }}
            onMonthChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["datePicker", "month"]).apply(
                null,
                eventArgs
              );
            }}
            onYearChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["datePicker", "year"]).apply(
                null,
                eventArgs
              );
            }}
            value={generateStateValueProp($state, ["datePicker", "value"])}
            values={generateStateValueProp($state, ["datePicker", "values"])}
          />

          <div className={classNames(projectcss.all, sty.freeBox__aNei5)}>
            <TimePicker
              data-plasmic-name={"timePicker2"}
              data-plasmic-override={overrides.timePicker2}
              className={classNames("__wab_instance", sty.timePicker2)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "timePicker2",
                  "value"
                ]).apply(null, eventArgs);
              }}
              value={generateStateValueProp($state, ["timePicker2", "value"])}
            />

            <AntdButton
              className={classNames("__wab_instance", sty.button__gkgTy)}
              onClick={async () => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = { args: [] };
                      return $globalActions["Angel.apiRequest"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ju3R
                )}
              >
                {"Button"}
              </div>
            </AntdButton>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "coreHeaderAdminHeader",
    "modal",
    "formAddActivity",
    "svg",
    "datePicker",
    "timePicker2"
  ],
  coreHeaderAdminHeader: ["coreHeaderAdminHeader"],
  modal: ["modal", "formAddActivity", "svg"],
  formAddActivity: ["formAddActivity"],
  svg: ["svg"],
  datePicker: ["datePicker"],
  timePicker2: ["timePicker2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  coreHeaderAdminHeader: typeof CoreHeaderAdminHeader;
  modal: typeof AntdModal;
  formAddActivity: typeof FormWrapper;
  svg: "svg";
  datePicker: typeof DatePicker;
  timePicker2: typeof TimePicker;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminActivityTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminActivityTest__VariantsArgs;
    args?: PlasmicAdminActivityTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminActivityTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdminActivityTest__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminActivityTest__ArgProps,
          internalVariantPropNames: PlasmicAdminActivityTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminActivityTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminActivityTest";
  } else {
    func.displayName = `PlasmicAdminActivityTest.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminActivityTest = Object.assign(
  // Top-level PlasmicAdminActivityTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    coreHeaderAdminHeader: makeNodeComponent("coreHeaderAdminHeader"),
    modal: makeNodeComponent("modal"),
    formAddActivity: makeNodeComponent("formAddActivity"),
    svg: makeNodeComponent("svg"),
    datePicker: makeNodeComponent("datePicker"),
    timePicker2: makeNodeComponent("timePicker2"),

    // Metadata about props expected for PlasmicAdminActivityTest
    internalVariantProps: PlasmicAdminActivityTest__VariantProps,
    internalArgProps: PlasmicAdminActivityTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminActivityTest;
/* prettier-ignore-end */
