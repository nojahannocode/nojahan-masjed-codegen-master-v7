// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: 70uW4VfZf5uQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CoreHeaderAdminHeader from "../../CoreHeaderAdminHeader"; // plasmic-import: ZTGMlsvVVp1c/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Label2 from "../../Label2"; // plasmic-import: 2jqcHHkVgsbR/component
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicAdminTaskAdd.module.css"; // plasmic-import: 70uW4VfZf5uQ/css

import { me as __fn_me } from "@/angel/me"; // plasmic-import: me/customFunction

createPlasmicElementProxy;

export type PlasmicAdminTaskAdd__VariantMembers = {};
export type PlasmicAdminTaskAdd__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminTaskAdd__VariantsArgs;
export const PlasmicAdminTaskAdd__VariantProps = new Array<VariantPropType>();

export type PlasmicAdminTaskAdd__ArgsType = {};
type ArgPropType = keyof PlasmicAdminTaskAdd__ArgsType;
export const PlasmicAdminTaskAdd__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminTaskAdd__OverridesType = {
  root?: Flex__<"div">;
  coreHeaderAdminHeader?: Flex__<typeof CoreHeaderAdminHeader>;
  freeBox?: Flex__<"div">;
  addTask?: Flex__<typeof FormWrapper>;
  input3?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  label2?: Flex__<typeof Label2>;
  richTextEditor?: Flex__<typeof Quill>;
  select?: Flex__<typeof AntdSelect>;
  select2?: Flex__<typeof AntdSelect>;
  select3?: Flex__<typeof AntdSelect>;
  select4?: Flex__<typeof AntdSelect>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultAdminTaskAddProps {}

const $$ = {
  me: __fn_me
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminTaskAdd__RenderFunc(props: {
  variants: PlasmicAdminTaskAdd__VariantsArgs;
  args: PlasmicAdminTaskAdd__ArgsType;
  overrides: PlasmicAdminTaskAdd__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "addTask.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "addTask",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "addTask.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "addTask",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "richTextEditor.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <CoreHeaderAdminHeader
            data-plasmic-name={"coreHeaderAdminHeader"}
            data-plasmic-override={overrides.coreHeaderAdminHeader}
            className={classNames("__wab_instance", sty.coreHeaderAdminHeader)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.addTask),
                extendedOnValuesChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["addTask", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://noapi.darkube.app/webhook/admin/task",
                            (() => {
                              try {
                                return {
                                  masjed_id: 1
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return {
                                  ...$state.addTask.value,
                                  help: $state.richTextEditor.value,
                                  activity_id: $ctx.params.activityId
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return {
                                  headers: { "x-token": $$.me()?.token }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Angel.apiRequest"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["goToAdminTaskTasks"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/admin/${(() => {
                            try {
                              return $ctx.params.activityId;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}/tasks`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToAdminTaskTasks"] != null &&
                    typeof $steps["goToAdminTaskTasks"] === "object" &&
                    typeof $steps["goToAdminTaskTasks"].then === "function"
                  ) {
                    $steps["goToAdminTaskTasks"] = await $steps[
                      "goToAdminTaskTasks"
                    ];
                  }

                  $steps["runActionOnAddTask"] = true
                    ? (() => {
                        const actionArgs = {
                          tplRef: "addTask",
                          action: "resetFields"
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runActionOnAddTask"] != null &&
                    typeof $steps["runActionOnAddTask"] === "object" &&
                    typeof $steps["runActionOnAddTask"].then === "function"
                  ) {
                    $steps["runActionOnAddTask"] = await $steps[
                      "runActionOnAddTask"
                    ];
                  }
                },
                onIsSubmittingChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["addTask", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["addTask"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "addTask.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "addTask.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"addTask"}
                  data-plasmic-override={overrides.addTask}
                  {...child$Props}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__hT2Pz
                    )}
                    initialValue={``}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__myUqz
                        )}
                      >
                        {
                          "\u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u0626\u0648\u0644\u06cc\u062a"
                        }
                      </div>
                    }
                    name={"title"}
                    rules={[
                      {
                        ruleType: "required",
                        message:
                          "\u0641\u06cc\u0644\u062f \u0636\u0631\u0648\u0631\u06cc"
                      }
                    ]}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input3),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input3",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input3.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input3"}
                          data-plasmic-override={overrides.input3}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__msLa
                    )}
                    initialValue={``}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rPuyt
                        )}
                      >
                        {"\u062a\u0648\u0636\u06cc\u062d\u0627\u062a"}
                      </div>
                    }
                    name={"description"}
                    rules={[
                      {
                        ruleType: "required",
                        message:
                          "\u0641\u06cc\u0644\u062f \u0636\u0631\u0648\u0631\u06cc"
                      }
                    ]}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input2),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input2.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input2"}
                          data-plasmic-override={overrides.input2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <Label2
                    data-plasmic-name={"label2"}
                    data-plasmic-override={overrides.label2}
                    className={classNames("__wab_instance", sty.label2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__khCjw
                      )}
                    >
                      {
                        "\u0645\u062a\u0646 \u0631\u0627\u0647\u0646\u0645\u0627"
                      }
                    </div>
                  </Label2>
                  {(() => {
                    const child$Props = {
                      containerClassName: classNames(
                        "__wab_instance",
                        sty.richTextEditor
                      ),
                      defaultValue: ``,
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["richTextEditor", "value"],
                          Quill_Helpers
                        ).apply(null, eventArgs);
                      },
                      preserveWhitespace: true,
                      readOnly: false,
                      toolbar: {
                        textStyle: [
                          "bold",
                          "italic",
                          "underline",
                          "strikethrough"
                        ],
                        colors: ["text color", "text background"],
                        script: true,
                        fontFamily: true,
                        heading: [
                          "Heading 1",
                          "Heading 2",
                          "Heading 3",
                          "Heading 4",
                          "Heading 5",
                          "Heading 6",
                          "Body"
                        ],
                        fontSizes: ["small", "medium", "large", "huge"],
                        formatting: [
                          "alignment",
                          "list",
                          "indentation",
                          "text direction",
                          "clear formatting"
                        ],
                        inputTypes: [
                          "link",
                          "blockquote",
                          "image",
                          "video",
                          "code-block",
                          "formula"
                        ]
                      },
                      value: generateStateValueProp($state, [
                        "richTextEditor",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "richTextEditor.value"
                        }
                      ],
                      [],
                      Quill_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <Quill
                        data-plasmic-name={"richTextEditor"}
                        data-plasmic-override={overrides.richTextEditor}
                        {...child$Props}
                      />
                    );
                  })()}
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__cFid
                    )}
                    initialValue={"\u0635\u0628\u062d"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__so7Mq
                        )}
                      >
                        {
                          "\u0632\u0645\u0627\u0646 \u0627\u0646\u062c\u0627\u0645"
                        }
                      </div>
                    }
                    name={"time"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] = "\u0635\u0628\u062d";
                        __composite["0"]["value"] = "\u0635\u0628\u062d";
                        __composite["1"]["label"] = "\u0638\u0647\u0631";
                        __composite["1"]["value"] = "\u0638\u0647\u0631";
                        __composite["2"]["label"] = "\u0639\u0635\u0631";
                        __composite["2"]["value"] = "\u0639\u0635\u0631";
                        __composite["3"]["label"] = "\u0645\u063a\u0631\u0628";
                        __composite["3"]["value"] = "\u0645\u063a\u0631\u0628";
                        __composite["4"]["label"] = "\u0639\u0634\u0627\u0621";
                        __composite["4"]["value"] = "\u0639\u0634\u0627\u0621";
                        __composite["5"]["label"] = "\u0622\u0632\u0627\u062f";
                        __composite["5"]["value"] = "\u0622\u0632\u0627\u062f";
                        return __composite;
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2EXjG
                          )}
                        >
                          {"Select..."}
                        </div>
                      }
                      popupScopeClassName={sty["select__popup"]}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__vYkJg
                    )}
                    initialValue={"1"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f87MY
                        )}
                      >
                        {
                          "\u0645\u0646\u0627\u0633\u0628 \u0628\u0631\u0627\u06cc"
                        }
                      </div>
                    }
                    name={"age_id"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      className={classNames("__wab_instance", sty.select2)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select2",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] =
                          "\u0646\u0648\u0646\u0647\u0627\u0644\u0627\u0646";
                        __composite["0"]["value"] = "1";
                        __composite["1"]["label"] =
                          "\u0646\u0648\u062c\u0648\u0627\u0646\u0627\u0646";
                        __composite["1"]["value"] = "2";
                        __composite["2"]["label"] =
                          "\u062c\u0648\u0627\u0646\u0627\u0646";
                        __composite["2"]["value"] = "3";
                        __composite["3"]["label"] =
                          "\u0628\u0632\u0631\u06af\u0633\u0627\u0644\u0627\u0646";
                        __composite["3"]["value"] = "4";
                        return __composite;
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iHa3Y
                          )}
                        >
                          {"Select..."}
                        </div>
                      }
                      popupScopeClassName={sty["select2__popup"]}
                      value={generateStateValueProp($state, [
                        "select2",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___6Qo7O
                    )}
                    initialValue={"male"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s09Fu
                        )}
                      >
                        {"\u062c\u0646\u0633\u06cc\u062a"}
                      </div>
                    }
                    name={"gender"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select3"}
                      data-plasmic-override={overrides.select3}
                      className={classNames("__wab_instance", sty.select3)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select3",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] =
                          "\u0645\u0631\u062f\u0627\u0646\u0647";
                        __composite["0"]["value"] = "male";
                        __composite["1"]["label"] =
                          "\u0632\u0646\u0627\u0646\u0647";
                        __composite["1"]["value"] = "female";
                        return __composite;
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tdBgm
                          )}
                        >
                          {"Select..."}
                        </div>
                      }
                      popupScopeClassName={sty["select3__popup"]}
                      value={generateStateValueProp($state, [
                        "select3",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___2SjE2
                    )}
                    initialValue={"active"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vDtZn
                        )}
                      >
                        {
                          "\u0648\u0636\u0639\u06cc\u062a \u0627\u0646\u062a\u0634\u0627\u0631"
                        }
                      </div>
                    }
                    name={"status"}
                  >
                    <AntdSelect
                      data-plasmic-name={"select4"}
                      data-plasmic-override={overrides.select4}
                      className={classNames("__wab_instance", sty.select4)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select4",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        const __composite = [
                          { type: "option", label: null, value: null },
                          { type: "option", label: null, value: null }
                        ];
                        __composite["0"]["label"] =
                          "\u0645\u0646\u062a\u0634\u0631 \u0634\u062f\u0647";
                        __composite["0"]["value"] = "active";
                        __composite["1"]["label"] =
                          "\u0628\u0627\u06cc\u06af\u0627\u0646\u06cc";
                        __composite["1"]["value"] = "disabled";
                        return __composite;
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__afPaa
                          )}
                        >
                          {"Select..."}
                        </div>
                      }
                      popupScopeClassName={sty["select4__popup"]}
                      value={generateStateValueProp($state, [
                        "select4",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <AntdButton
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m0Ibr
                      )}
                    >
                      {
                        "\u062b\u0628\u062a \u0645\u0633\u0626\u0648\u0644\u06cc\u062a"
                      }
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "coreHeaderAdminHeader",
    "freeBox",
    "addTask",
    "input3",
    "input2",
    "label2",
    "richTextEditor",
    "select",
    "select2",
    "select3",
    "select4",
    "button"
  ],
  coreHeaderAdminHeader: ["coreHeaderAdminHeader"],
  freeBox: [
    "freeBox",
    "addTask",
    "input3",
    "input2",
    "label2",
    "richTextEditor",
    "select",
    "select2",
    "select3",
    "select4",
    "button"
  ],
  addTask: [
    "addTask",
    "input3",
    "input2",
    "label2",
    "richTextEditor",
    "select",
    "select2",
    "select3",
    "select4",
    "button"
  ],
  input3: ["input3"],
  input2: ["input2"],
  label2: ["label2"],
  richTextEditor: ["richTextEditor"],
  select: ["select"],
  select2: ["select2"],
  select3: ["select3"],
  select4: ["select4"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  coreHeaderAdminHeader: typeof CoreHeaderAdminHeader;
  freeBox: "div";
  addTask: typeof FormWrapper;
  input3: typeof AntdInput;
  input2: typeof AntdInput;
  label2: typeof Label2;
  richTextEditor: typeof Quill;
  select: typeof AntdSelect;
  select2: typeof AntdSelect;
  select3: typeof AntdSelect;
  select4: typeof AntdSelect;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminTaskAdd__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminTaskAdd__VariantsArgs;
    args?: PlasmicAdminTaskAdd__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminTaskAdd__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdminTaskAdd__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminTaskAdd__ArgProps,
          internalVariantPropNames: PlasmicAdminTaskAdd__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminTaskAdd__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminTaskAdd";
  } else {
    func.displayName = `PlasmicAdminTaskAdd.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminTaskAdd = Object.assign(
  // Top-level PlasmicAdminTaskAdd renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    coreHeaderAdminHeader: makeNodeComponent("coreHeaderAdminHeader"),
    freeBox: makeNodeComponent("freeBox"),
    addTask: makeNodeComponent("addTask"),
    input3: makeNodeComponent("input3"),
    input2: makeNodeComponent("input2"),
    label2: makeNodeComponent("label2"),
    richTextEditor: makeNodeComponent("richTextEditor"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),
    select4: makeNodeComponent("select4"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAdminTaskAdd
    internalVariantProps: PlasmicAdminTaskAdd__VariantProps,
    internalArgProps: PlasmicAdminTaskAdd__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminTaskAdd;
/* prettier-ignore-end */
