// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: f_y1jkaXWwio

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import CoreHeaderAdminHeader from "../../CoreHeaderAdminHeader"; // plasmic-import: ZTGMlsvVVp1c/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import TaskCardTasx from "../../TaskCardTasx"; // plasmic-import: pNWA3CgjmfOy/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantslyy4ZuIrWoht } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: lyy4ZUIrWoht/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicAdminTasks.module.css"; // plasmic-import: f_y1jkaXWwio/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: XASChn-p69Is/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: YW8jW_7M2k9A/icon

createPlasmicElementProxy;

export type PlasmicAdminTasks__VariantMembers = {};
export type PlasmicAdminTasks__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminTasks__VariantsArgs;
export const PlasmicAdminTasks__VariantProps = new Array<VariantPropType>();

export type PlasmicAdminTasks__ArgsType = {};
type ArgPropType = keyof PlasmicAdminTasks__ArgsType;
export const PlasmicAdminTasks__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminTasks__OverridesType = {
  root?: Flex__<"div">;
  coreHeaderAdminHeader?: Flex__<typeof CoreHeaderAdminHeader>;
  button?: Flex__<typeof AntdButton>;
  svg?: Flex__<"svg">;
  mentorCard?: Flex__<"div">;
  mentorAvatar?: Flex__<typeof AntdAvatar>;
  mentorName?: Flex__<"div">;
  role?: Flex__<"div">;
  mentorDetail?: Flex__<"div">;
  message?: Flex__<"div">;
  messageIcon2?: Flex__<"svg">;
  popover?: Flex__<typeof AntdPopover>;
  messageIcon?: Flex__<"svg">;
  taskCardTasx?: Flex__<typeof TaskCardTasx>;
};

export interface DefaultAdminTasksProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminTasks__RenderFunc(props: {
  variants: PlasmicAdminTasks__VariantsArgs;
  args: PlasmicAdminTasks__ArgsType;
  overrides: PlasmicAdminTasks__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "auth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("AuthorizationDetail"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "refreshState",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("RefreshAdminListTask")
                ? localStorage.getItem("RefreshAdminListTask")
                : 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    adminListTasks: usePlasmicDataOp(() => {
      return {
        sourceId: "hfKFoF6NHFakDLEE3BFPLz",
        opId: "9ec0fd75-a140-43f2-97e3-0e4df8bc180d",
        userArgs: {
          params: [$ctx.params.activityId],
          headers: [$state?.auth?.token]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return (
              "GetListAdminTasks + " +
              $ctx.params.activityId +
              " + " +
              (localStorage.getItem("RefreshAdminListTask")
                ? localStorage.getItem("RefreshAdminListTask")
                : 0)
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.9ec0fd75-a140-43f2-97e3-0e4df8bc180d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantslyy4ZuIrWoht()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAdminTasks.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAdminTasks.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAdminTasks.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <CoreHeaderAdminHeader
            data-plasmic-name={"coreHeaderAdminHeader"}
            data-plasmic-override={overrides.coreHeaderAdminHeader}
            className={classNames("__wab_instance", sty.coreHeaderAdminHeader)}
          />

          <AntdButton
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            onClick={async () => {
              const $steps = {};

              $steps["goToAdminAddNewTask"] = true
                ? (() => {
                    const actionArgs = {};
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToAdminAddNewTask"] != null &&
                typeof $steps["goToAdminAddNewTask"] === "object" &&
                typeof $steps["goToAdminAddNewTask"].then === "function"
              ) {
                $steps["goToAdminAddNewTask"] = await $steps[
                  "goToAdminAddNewTask"
                ];
              }
            }}
          >
            <Icon16Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </AntdButton>
          <div className={classNames(projectcss.all, sty.freeBox__xPvdw)}>
            <div
              data-plasmic-name={"mentorCard"}
              data-plasmic-override={overrides.mentorCard}
              className={classNames(projectcss.all, sty.mentorCard)}
              dir={"rtl"}
            >
              <AntdAvatar
                data-plasmic-name={"mentorAvatar"}
                data-plasmic-override={overrides.mentorAvatar}
                className={classNames("__wab_instance", sty.mentorAvatar)}
                letters={"AB"}
                src={
                  "/plasmic/nojahan_masjed_new_code_gen_master/images/screenshot20250222174624Png.png"
                }
              />

              <div className={classNames(projectcss.all, sty.freeBox__pj7L1)}>
                <div
                  data-plasmic-name={"mentorName"}
                  data-plasmic-override={overrides.mentorName}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.mentorName
                  )}
                  dir={"rtl"}
                >
                  {
                    "\u062d\u062c\u062a \u0627\u0644\u0627\u0633\u0644\u0627\u0645 \u062c\u0639\u0641\u0631 \u0628\u062f\u0631\u062e\u0627\u0646\u06cc"
                  }
                </div>
                <div
                  data-plasmic-name={"role"}
                  data-plasmic-override={overrides.role}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.role
                  )}
                  dir={"rtl"}
                >
                  {
                    "\u0627\u0645\u0627\u0645 \u062c\u0645\u0627\u0639\u062a \u0645\u0633\u062c\u062f \u062d\u0636\u0631\u062a \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633)"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"mentorDetail"}
                data-plasmic-override={overrides.mentorDetail}
                className={classNames(projectcss.all, sty.mentorDetail)}
              >
                <div
                  data-plasmic-name={"message"}
                  data-plasmic-override={overrides.message}
                  className={classNames(projectcss.all, sty.message)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToChat"] = true
                      ? (() => {
                          const actionArgs = { destination: `/chat` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToChat"] != null &&
                      typeof $steps["goToChat"] === "object" &&
                      typeof $steps["goToChat"].then === "function"
                    ) {
                      $steps["goToChat"] = await $steps["goToChat"];
                    }
                  }}
                >
                  <Icon9Icon
                    data-plasmic-name={"messageIcon2"}
                    data-plasmic-override={overrides.messageIcon2}
                    className={classNames(projectcss.all, sty.messageIcon2)}
                    role={"img"}
                  />

                  <AntdPopover
                    data-plasmic-name={"popover"}
                    data-plasmic-override={overrides.popover}
                    arrow={true}
                    className={classNames("__wab_instance", sty.popover)}
                    content={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xELv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2QLlz
                          )}
                        >
                          {
                            "\u0633\u0644\u0627\u0645 \u0634\u0647\u0631\u0627\u0645\n\u0627\u0645\u0631\u0648\u0632 \u0628\u0627\u06cc\u062f \u0632\u0648\u062f \u062a\u0631 \u0628\u06cc\u0627\u06cc \u0645\u0633\u062c\u062f"
                          }
                        </div>
                      </div>
                    }
                    contentText={"Popover contents"}
                    defaultOpen={true}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    mouseEnterDelay={0}
                    mouseLeaveDelay={0}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "popover",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, ["popover", "open"])}
                    placement={"bottom"}
                    popoverScopeClassName={sty["popover__popover"]}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__okPhp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1S2Mw
                          )}
                        >
                          {
                            "\u0622\u062e\u0631\u06cc\u0646 \u067e\u06cc\u0627\u0645"
                          }
                        </div>
                      </div>
                    }
                  >
                    <Icon9Icon
                      data-plasmic-name={"messageIcon"}
                      data-plasmic-override={overrides.messageIcon}
                      className={classNames(projectcss.all, sty.messageIcon)}
                      role={"img"}
                    />
                  </AntdPopover>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2IfVh
                    )}
                  >
                    {"1"}
                  </div>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fU2Fc)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yWzYf
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries?.adminListTasks?.data?.response?.at(0)
                        ?.activity_name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            {(() => {
              try {
                return (
                  !!$queries?.adminListTasks?.data?.response &&
                  !$queries?.adminListTasks?.data?.response?.message
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lBh5N)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fq2Ap)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.adminListTasks.data.response;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <TaskCardTasx
                        data-plasmic-name={"taskCardTasx"}
                        data-plasmic-override={overrides.taskCardTasx}
                        activeS={(() => {
                          try {
                            return currentItem.status === "active";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        age={(() => {
                          try {
                            return currentItem.age_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.taskCardTasx
                        )}
                        description2={(() => {
                          try {
                            return currentItem.description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        detail={(() => {
                          try {
                            return currentItem["help "];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        disabledS={(() => {
                          try {
                            return currentItem.status === "disabled";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        doneS={(() => {
                          try {
                            return currentItem.status === "done";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        draftS={(() => {
                          try {
                            return currentItem.status === "draft";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        firstName={(() => {
                          try {
                            return currentItem?.first_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        gender={(() => {
                          try {
                            return currentItem.gender;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        lastName={(() => {
                          try {
                            return currentItem?.last_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        status={(() => {
                          try {
                            return currentItem.status;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        taskId={(() => {
                          try {
                            return currentItem.id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        time={(() => {
                          try {
                            return currentItem.time;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        titel2={(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        userId={(() => {
                          try {
                            return currentItem.user_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
              </Stack__>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "coreHeaderAdminHeader",
    "button",
    "svg",
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon",
    "taskCardTasx"
  ],
  coreHeaderAdminHeader: ["coreHeaderAdminHeader"],
  button: ["button", "svg"],
  svg: ["svg"],
  mentorCard: [
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon"
  ],
  mentorAvatar: ["mentorAvatar"],
  mentorName: ["mentorName"],
  role: ["role"],
  mentorDetail: [
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon"
  ],
  message: ["message", "messageIcon2", "popover", "messageIcon"],
  messageIcon2: ["messageIcon2"],
  popover: ["popover", "messageIcon"],
  messageIcon: ["messageIcon"],
  taskCardTasx: ["taskCardTasx"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  coreHeaderAdminHeader: typeof CoreHeaderAdminHeader;
  button: typeof AntdButton;
  svg: "svg";
  mentorCard: "div";
  mentorAvatar: typeof AntdAvatar;
  mentorName: "div";
  role: "div";
  mentorDetail: "div";
  message: "div";
  messageIcon2: "svg";
  popover: typeof AntdPopover;
  messageIcon: "svg";
  taskCardTasx: typeof TaskCardTasx;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminTasks__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminTasks__VariantsArgs;
    args?: PlasmicAdminTasks__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminTasks__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdminTasks__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminTasks__ArgProps,
          internalVariantPropNames: PlasmicAdminTasks__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminTasks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminTasks";
  } else {
    func.displayName = `PlasmicAdminTasks.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminTasks = Object.assign(
  // Top-level PlasmicAdminTasks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    coreHeaderAdminHeader: makeNodeComponent("coreHeaderAdminHeader"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    mentorCard: makeNodeComponent("mentorCard"),
    mentorAvatar: makeNodeComponent("mentorAvatar"),
    mentorName: makeNodeComponent("mentorName"),
    role: makeNodeComponent("role"),
    mentorDetail: makeNodeComponent("mentorDetail"),
    message: makeNodeComponent("message"),
    messageIcon2: makeNodeComponent("messageIcon2"),
    popover: makeNodeComponent("popover"),
    messageIcon: makeNodeComponent("messageIcon"),
    taskCardTasx: makeNodeComponent("taskCardTasx"),

    // Metadata about props expected for PlasmicAdminTasks
    internalVariantProps: PlasmicAdminTasks__VariantProps,
    internalArgProps: PlasmicAdminTasks__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیست کار‌های تعریف شده",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminTasks;
/* prettier-ignore-end */
