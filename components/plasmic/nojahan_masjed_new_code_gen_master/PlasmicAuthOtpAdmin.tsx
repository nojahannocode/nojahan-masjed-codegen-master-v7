// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: DNqo8FtdHV40

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import AuthLoginComponent from "../../AuthLoginComponent"; // plasmic-import: Tm95Yqly1EMg/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicAuthOtpAdmin.module.css"; // plasmic-import: DNqo8FtdHV40/css

createPlasmicElementProxy;

export type PlasmicAuthOtpAdmin__VariantMembers = {};
export type PlasmicAuthOtpAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicAuthOtpAdmin__VariantsArgs;
export const PlasmicAuthOtpAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicAuthOtpAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicAuthOtpAdmin__ArgsType;
export const PlasmicAuthOtpAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicAuthOtpAdmin__OverridesType = {
  authOtp?: Flex__<"div">;
  loginComponent?: Flex__<typeof AuthLoginComponent>;
};

export interface DefaultAuthOtpAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuthOtpAdmin__RenderFunc(props: {
  variants: PlasmicAuthOtpAdmin__VariantsArgs;
  args: PlasmicAuthOtpAdmin__ArgsType;
  overrides: PlasmicAuthOtpAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "otpWsaSended",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "authDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loginComponent.loginDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    usersList: usePlasmicDataOp(() => {
      return {
        sourceId: "ot1VBi9vFtFD1mbkPrDZdA",
        opId: "fb6b398c-6e54-40ce-b168-581357a08d0b",
        userArgs: {},
        cacheKey: `plasmic.$.fb6b398c-6e54-40ce-b168-581357a08d0b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAuthOtpAdmin.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAuthOtpAdmin.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAuthOtpAdmin.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicAuthOtpAdmin.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicAuthOtpAdmin.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicAuthOtpAdmin.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"authOtp"}
          data-plasmic-override={overrides.authOtp}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.authOtp
          )}
        >
          <AuthLoginComponent
            data-plasmic-name={"loginComponent"}
            data-plasmic-override={overrides.loginComponent}
            className={classNames("__wab_instance", sty.loginComponent)}
            loginDetail={generateStateValueProp($state, [
              "loginComponent",
              "loginDetail"
            ])}
            onLoginDetailChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "loginComponent",
                "loginDetail"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            roleProp={"admin"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  authOtp: ["authOtp", "loginComponent"],
  loginComponent: ["loginComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  authOtp: "div";
  loginComponent: typeof AuthLoginComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthOtpAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthOtpAdmin__VariantsArgs;
    args?: PlasmicAuthOtpAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthOtpAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthOtpAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAuthOtpAdmin__ArgProps,
          internalVariantPropNames: PlasmicAuthOtpAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuthOtpAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "authOtp") {
    func.displayName = "PlasmicAuthOtpAdmin";
  } else {
    func.displayName = `PlasmicAuthOtpAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthOtpAdmin = Object.assign(
  // Top-level PlasmicAuthOtpAdmin renders the root element
  makeNodeComponent("authOtp"),
  {
    // Helper components rendering sub-elements
    loginComponent: makeNodeComponent("loginComponent"),

    // Metadata about props expected for PlasmicAuthOtpAdmin
    internalVariantProps: PlasmicAuthOtpAdmin__VariantProps,
    internalArgProps: PlasmicAuthOtpAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "ورود به مسجد",
      description: "ورود مدیریت",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAuthOtpAdmin;
/* prettier-ignore-end */
