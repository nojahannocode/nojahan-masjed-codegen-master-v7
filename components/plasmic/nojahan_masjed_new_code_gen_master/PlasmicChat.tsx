// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: H4PoDwNWaGYN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CoreHeaderSubHeader from "../../CoreHeaderSubHeader"; // plasmic-import: Hsif2_wuRX1g/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import MessageChatComponent from "../../MessageChatComponent"; // plasmic-import: 3uyfO7NANclf/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicChat.module.css"; // plasmic-import: H4PoDwNWaGYN/css

import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: IHFRok4VDyFq/icon

createPlasmicElementProxy;

export type PlasmicChat__VariantMembers = {};
export type PlasmicChat__VariantsArgs = {};
type VariantPropType = keyof PlasmicChat__VariantsArgs;
export const PlasmicChat__VariantProps = new Array<VariantPropType>();

export type PlasmicChat__ArgsType = {};
type ArgPropType = keyof PlasmicChat__ArgsType;
export const PlasmicChat__ArgProps = new Array<ArgPropType>();

export type PlasmicChat__OverridesType = {
  root?: Flex__<"div">;
  coreHeaderSubHeader?: Flex__<typeof CoreHeaderSubHeader>;
  iframe?: Flex__<typeof Iframe>;
  section?: Flex__<"section">;
  mentorCard?: Flex__<"div">;
  mentorAvatar?: Flex__<typeof AntdAvatar>;
  mentorName?: Flex__<"div">;
  role?: Flex__<"div">;
  text?: Flex__<"div">;
  messageChatComponent?: Flex__<typeof MessageChatComponent>;
  textArea?: Flex__<typeof AntdTextArea>;
  svg?: Flex__<"svg">;
};

export interface DefaultChatProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChat__RenderFunc(props: {
  variants: PlasmicChat__VariantsArgs;
  args: PlasmicChat__ArgsType;
  overrides: PlasmicChat__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <CoreHeaderSubHeader
            data-plasmic-name={"coreHeaderSubHeader"}
            data-plasmic-override={overrides.coreHeaderSubHeader}
            className={classNames("__wab_instance", sty.coreHeaderSubHeader)}
          />

          <Iframe
            data-plasmic-name={"iframe"}
            data-plasmic-override={overrides.iframe}
            className={classNames("__wab_instance", sty.iframe)}
            preview={true}
            src={"https://www.goftino.com/c/FqTbNh"}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"mentorCard"}
              data-plasmic-override={overrides.mentorCard}
              className={classNames(projectcss.all, sty.mentorCard)}
              dir={"rtl"}
            >
              <AntdAvatar
                data-plasmic-name={"mentorAvatar"}
                data-plasmic-override={overrides.mentorAvatar}
                className={classNames("__wab_instance", sty.mentorAvatar)}
                letters={"AB"}
                src={
                  "/plasmic/nojahan_masjed_new_code_gen_master/images/screenshot20250222174624Png.png"
                }
              />

              <div className={classNames(projectcss.all, sty.freeBox__ti71W)}>
                <div
                  data-plasmic-name={"mentorName"}
                  data-plasmic-override={overrides.mentorName}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.mentorName
                  )}
                  dir={"rtl"}
                >
                  {
                    "\u062d\u062c\u062a \u0627\u0644\u0627\u0633\u0644\u0627\u0645 \u062c\u0639\u0641\u0631 \u0628\u062f\u0631\u062e\u0627\u0646\u06cc"
                  }
                </div>
                <div
                  data-plasmic-name={"role"}
                  data-plasmic-override={overrides.role}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.role
                  )}
                  dir={"rtl"}
                >
                  {
                    "\u0627\u0645\u0627\u0645 \u062c\u0645\u0627\u0639\u062a \u0645\u0633\u062c\u062f \u062d\u0636\u0631\u062a \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633)"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__tWlYo)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__bgSk9)}
                  onClick={async () => {
                    const $steps = {};

                    $steps["goToTask"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToTask"] != null &&
                      typeof $steps["goToTask"] === "object" &&
                      typeof $steps["goToTask"].then === "function"
                    ) {
                      $steps["goToTask"] = await $steps["goToTask"];
                    }
                  }}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                  </div>
                </AntdButton>
              </div>
            </div>
          </section>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
            2, 3, 4
          ]).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <MessageChatComponent
                data-plasmic-name={"messageChatComponent"}
                data-plasmic-override={overrides.messageChatComponent}
                className={classNames(
                  "__wab_instance",
                  sty.messageChatComponent
                )}
                key={currentIndex}
              />
            );
          })}
          <div className={classNames(projectcss.all, sty.freeBox__yFccw)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xpjra)}
              dir={"rtl"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.textArea),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["textArea", "value"],
                      AntdTextArea_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder:
                    "\u0627\u06cc\u0646\u062c\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f...",
                  value: generateStateValueProp($state, ["textArea", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "textArea.value"
                    }
                  ],
                  [],
                  AntdTextArea_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdTextArea
                    data-plasmic-name={"textArea"}
                    data-plasmic-override={overrides.textArea}
                    {...child$Props}
                  />
                );
              })()}
              <AntdButton
                className={classNames("__wab_instance", sty.button__gn5M)}
              >
                <Icon10Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </AntdButton>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "coreHeaderSubHeader",
    "iframe",
    "section",
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "text",
    "messageChatComponent",
    "textArea",
    "svg"
  ],
  coreHeaderSubHeader: ["coreHeaderSubHeader"],
  iframe: ["iframe"],
  section: [
    "section",
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "text"
  ],
  mentorCard: ["mentorCard", "mentorAvatar", "mentorName", "role", "text"],
  mentorAvatar: ["mentorAvatar"],
  mentorName: ["mentorName"],
  role: ["role"],
  text: ["text"],
  messageChatComponent: ["messageChatComponent"],
  textArea: ["textArea"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  coreHeaderSubHeader: typeof CoreHeaderSubHeader;
  iframe: typeof Iframe;
  section: "section";
  mentorCard: "div";
  mentorAvatar: typeof AntdAvatar;
  mentorName: "div";
  role: "div";
  text: "div";
  messageChatComponent: typeof MessageChatComponent;
  textArea: typeof AntdTextArea;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChat__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChat__VariantsArgs;
    args?: PlasmicChat__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChat__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicChat__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChat__ArgProps,
          internalVariantPropNames: PlasmicChat__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChat";
  } else {
    func.displayName = `PlasmicChat.${nodeName}`;
  }
  return func;
}

export const PlasmicChat = Object.assign(
  // Top-level PlasmicChat renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    coreHeaderSubHeader: makeNodeComponent("coreHeaderSubHeader"),
    iframe: makeNodeComponent("iframe"),
    section: makeNodeComponent("section"),
    mentorCard: makeNodeComponent("mentorCard"),
    mentorAvatar: makeNodeComponent("mentorAvatar"),
    mentorName: makeNodeComponent("mentorName"),
    role: makeNodeComponent("role"),
    text: makeNodeComponent("text"),
    messageChatComponent: makeNodeComponent("messageChatComponent"),
    textArea: makeNodeComponent("textArea"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicChat
    internalVariantProps: PlasmicChat__VariantProps,
    internalArgProps: PlasmicChat__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicChat;
/* prettier-ignore-end */
