// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: 8x-tDBj79ns0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";

import { useScreenVariants as useScreenVariantslyy4ZuIrWoht } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: lyy4ZUIrWoht/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicTaskCardActivitie.module.css"; // plasmic-import: 8x-tDBj79ns0/css

import EditStreamlineTablerSvgIcon from "./icons/PlasmicIcon__EditStreamlineTablerSvg"; // plasmic-import: JHjItL2k5LM6/icon
import FemaleSvgrepoComSvgIcon from "./icons/PlasmicIcon__FemaleSvgrepoComSvg"; // plasmic-import: rCOHyDWJuOrd/icon
import MaleSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__MaleSvgrepoCom2Svg"; // plasmic-import: 5hZD53HT3wtA/icon

createPlasmicElementProxy;

export type PlasmicTaskCardActivitie__VariantMembers = {
  activeS: "activeS";
  disabledS: "disabledS";
  doneS: "doneS";
  draftS: "draftS";
};
export type PlasmicTaskCardActivitie__VariantsArgs = {
  activeS?: SingleBooleanChoiceArg<"activeS">;
  disabledS?: SingleBooleanChoiceArg<"disabledS">;
  doneS?: SingleBooleanChoiceArg<"doneS">;
  draftS?: SingleBooleanChoiceArg<"draftS">;
};
type VariantPropType = keyof PlasmicTaskCardActivitie__VariantsArgs;
export const PlasmicTaskCardActivitie__VariantProps =
  new Array<VariantPropType>("activeS", "disabledS", "doneS", "draftS");

export type PlasmicTaskCardActivitie__ArgsType = {
  name?: string;
  time?: string;
  gender?: string;
  status?: string;
  numberTask?: number;
  id?: number;
};
type ArgPropType = keyof PlasmicTaskCardActivitie__ArgsType;
export const PlasmicTaskCardActivitie__ArgProps = new Array<ArgPropType>(
  "name",
  "time",
  "gender",
  "status",
  "numberTask",
  "id"
);

export type PlasmicTaskCardActivitie__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  select?: Flex__<typeof AntdSelect>;
  select2?: Flex__<typeof AntdSelect>;
  task?: Flex__<"div">;
  titel?: Flex__<"div">;
  strong?: Flex__<"strong">;
};

export interface DefaultTaskCardActivitieProps {
  name?: string;
  time?: string;
  gender?: string;
  status?: string;
  numberTask?: number;
  id?: number;
  activeS?: SingleBooleanChoiceArg<"activeS">;
  disabledS?: SingleBooleanChoiceArg<"disabledS">;
  doneS?: SingleBooleanChoiceArg<"doneS">;
  draftS?: SingleBooleanChoiceArg<"draftS">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTaskCardActivitie__RenderFunc(props: {
  variants: PlasmicTaskCardActivitie__VariantsArgs;
  args: PlasmicTaskCardActivitie__ArgsType;
  overrides: PlasmicTaskCardActivitie__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "\u0627\u0633\u0645 \u06a9\u0627\u0631"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "activeS",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.activeS
      },
      {
        path: "disabledS",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disabledS
      },
      {
        path: "doneS",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.doneS
      },
      {
        path: "draftS",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.draftS
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "auth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("AuthorizationDetail"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "activityContent",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantslyy4ZuIrWoht()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <AntdButton
        className={classNames("__wab_instance", sty.button__cP8H6)}
        onClick={async () => {
          const $steps = {};

          $steps["updateModalOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["modal", "open"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateModalOpen"] != null &&
            typeof $steps["updateModalOpen"] === "object" &&
            typeof $steps["updateModalOpen"].then === "function"
          ) {
            $steps["updateModalOpen"] = await $steps["updateModalOpen"];
          }
        }}
      >
        <EditStreamlineTablerSvgIcon
          className={classNames(projectcss.all, sty.svg__oJ0Nq)}
          role={"img"}
        />
      </AntdButton>
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        footer={
          <div className={classNames(projectcss.all, sty.freeBox___0YmSf)} />
        }
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={null}
        trigger={null}
      >
        {(() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.form),
            extendedOnValuesChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "value",
                ["form", "value"],
                FormWrapper_Helpers
              ).apply(null, eventArgs);

              (async (changedValues, allValues) => {
                const $steps = {};
              }).apply(null, eventArgs);
            },
            formItems: [
              { label: "Name", name: "name", inputType: "Text" },
              { label: "Message", name: "message", inputType: "Text Area" }
            ],
            labelCol: { span: 8, horizontalOnly: true },
            layout: "vertical",
            mode: "advanced",
            onFinish: async values => {
              const $steps = {};

              $steps["httpPut"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "hfKFoF6NHFakDLEE3BFPLz",
                        opId: "d9fd08d1-32ef-47fd-b506-6609207a1d3a",
                        userArgs: {
                          params: [$props.id],
                          headers: [$state.auth.token],
                          body: [
                            $state.form.value.name,
                            $state.form.value.gender,
                            $state.form.value.status
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: [
                          "3f11b462-3eb2-4a08-8032-3a636e6e7df7",
                          "3f11b462-3eb2-4a08-8032-3a636e6e7df7"
                        ],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["httpPut"] != null &&
                typeof $steps["httpPut"] === "object" &&
                typeof $steps["httpPut"].then === "function"
              ) {
                $steps["httpPut"] = await $steps["httpPut"];
              }

              $steps["updateModalOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modal", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModalOpen"] != null &&
                typeof $steps["updateModalOpen"] === "object" &&
                typeof $steps["updateModalOpen"].then === "function"
              ) {
                $steps["updateModalOpen"] = await $steps["updateModalOpen"];
              }
            },
            onIsSubmittingChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "isSubmitting",
                ["form", "isSubmitting"],
                FormWrapper_Helpers
              ).apply(null, eventArgs);
            },
            ref: ref => {
              $refs["form"] = ref;
            },
            submitSlot: null,
            wrapperCol: { span: 16, horizontalOnly: true }
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "value",
                plasmicStateName: "form.value"
              },
              {
                name: "isSubmitting",
                plasmicStateName: "form.isSubmitting"
              }
            ],
            [],
            FormWrapper_Helpers ?? {},
            child$Props
          );

          return (
            <FormWrapper
              data-plasmic-name={"form"}
              data-plasmic-override={overrides.form}
              {...child$Props}
            >
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__nsHuN)}
                initialValue={$props.name}
                label={
                  "\u0646\u0627\u0645 \u0641\u0639\u0627\u0644\u06cc\u062a"
                }
                name={"name"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, ["input", "value"])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "input.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"input"}
                      data-plasmic-override={overrides.input}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__csPAj)}
                initialValue={(() => {
                  try {
                    return $props.gender;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                label={"\u062c\u0646\u0633\u06cc\u062a"}
                name={"gender"}
              >
                <AntdSelect
                  data-plasmic-name={"select"}
                  data-plasmic-override={overrides.select}
                  className={classNames("__wab_instance", sty.select)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  options={(() => {
                    const __composite = [
                      { type: "option", label: null, value: null },
                      { type: "option", label: null, value: null },
                      { type: "option", label: null, value: null }
                    ];
                    __composite["0"]["label"] = "\u0645\u0631\u062f";
                    __composite["0"]["value"] = "male";
                    __composite["1"]["label"] = "\u0632\u0646";
                    __composite["1"]["value"] = "female";
                    __composite["2"]["label"] = "\u0647\u0631\u062f\u0648";
                    __composite["2"]["value"] = "both";
                    return __composite;
                  })()}
                  placeholder={"Select..."}
                  popupScopeClassName={sty["select__popup"]}
                  value={generateStateValueProp($state, ["select", "value"])}
                />
              </FormItemWrapper>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField___7RwyD)}
                initialValue={(() => {
                  try {
                    return $props.status;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                label={"\u0648\u0636\u0639\u06cc\u062a"}
                name={"status"}
              >
                <AntdSelect
                  data-plasmic-name={"select2"}
                  data-plasmic-override={overrides.select2}
                  className={classNames("__wab_instance", sty.select2)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select2",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  options={(() => {
                    const __composite = [
                      { type: "option", label: null, value: null },
                      { type: "option", label: null, value: null }
                    ];
                    __composite["0"]["label"] =
                      "\u062f\u0631\u062c\u0631\u06cc\u0627\u0646";
                    __composite["0"]["value"] = "active";
                    __composite["1"]["label"] =
                      "\u067e\u06cc\u0634\u200c\u0646\u0648\u06cc\u0633";
                    __composite["1"]["value"] = "inactive";
                    return __composite;
                  })()}
                  placeholder={"Select..."}
                  popupScopeClassName={sty["select2__popup"]}
                  value={generateStateValueProp($state, ["select2", "value"])}
                />
              </FormItemWrapper>
              <AntdButton
                className={classNames("__wab_instance", sty.button___2MgHh)}
                onClick={async () => {
                  const $steps = {};

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                submitsForm={true}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Rmhd
                  )}
                >
                  {
                    "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0641\u0639\u0627\u0644\u06cc\u062a"
                  }
                </div>
              </AntdButton>
            </FormWrapper>
          );
        })()}
      </AntdModal>
      <div
        className={classNames(projectcss.all, sty.freeBox__xLNo)}
        onClick={async event => {
          const $steps = {};

          $steps["goToAdminTasks"] = true
            ? (() => {
                const actionArgs = {
                  destination: `/admin/${(() => {
                    try {
                      return $props.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}/tasks`
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToAdminTasks"] != null &&
            typeof $steps["goToAdminTasks"] === "object" &&
            typeof $steps["goToAdminTasks"].then === "function"
          ) {
            $steps["goToAdminTasks"] = await $steps["goToAdminTasks"];
          }
        }}
      >
        <div className={classNames(projectcss.all, sty.freeBox___7RRb4)}>
          <div
            data-plasmic-name={"task"}
            data-plasmic-override={overrides.task}
            className={classNames(projectcss.all, sty.task)}
            dir={"rtl"}
          >
            <div
              data-plasmic-name={"titel"}
              data-plasmic-override={overrides.titel}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.titel
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0639\u0646\u0648\u0627\u0646:";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__pbZec)} />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__nRjO7)}>
          <div className={classNames(projectcss.all, sty.freeBox__mJfyc)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kGxm3
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {"\u0631\u06cc\u0632\u06a9\u0627\u0631\u0647\u0627:  "}
                </React.Fragment>
                {
                  <strong
                    data-plasmic-name={"strong"}
                    data-plasmic-override={overrides.strong}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.strong
                    )}
                  >
                    {""}
                  </strong>
                }
                <React.Fragment>{" \u0639\u062f\u062f"}</React.Fragment>
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__mbJWi)}>
            {(() => {
              try {
                return $props.gender !== "male";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <FemaleSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__rR58G)}
                role={"img"}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $props.gender !== "female";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $props.gender !== "female";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <MaleSvgrepoCom2SvgIcon
                className={classNames(projectcss.all, sty.svg__q2O8Q)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nq2Oo
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "form",
    "input",
    "select",
    "select2",
    "task",
    "titel",
    "strong"
  ],
  modal: ["modal", "form", "input", "select", "select2"],
  form: ["form", "input", "select", "select2"],
  input: ["input"],
  select: ["select"],
  select2: ["select2"],
  task: ["task", "titel"],
  titel: ["titel"],
  strong: ["strong"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  select: typeof AntdSelect;
  select2: typeof AntdSelect;
  task: "div";
  titel: "div";
  strong: "strong";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTaskCardActivitie__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTaskCardActivitie__VariantsArgs;
    args?: PlasmicTaskCardActivitie__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTaskCardActivitie__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTaskCardActivitie__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTaskCardActivitie__ArgProps,
          internalVariantPropNames: PlasmicTaskCardActivitie__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTaskCardActivitie__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTaskCardActivitie";
  } else {
    func.displayName = `PlasmicTaskCardActivitie.${nodeName}`;
  }
  return func;
}

export const PlasmicTaskCardActivitie = Object.assign(
  // Top-level PlasmicTaskCardActivitie renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    task: makeNodeComponent("task"),
    titel: makeNodeComponent("titel"),
    strong: makeNodeComponent("strong"),

    // Metadata about props expected for PlasmicTaskCardActivitie
    internalVariantProps: PlasmicTaskCardActivitie__VariantProps,
    internalArgProps: PlasmicTaskCardActivitie__ArgProps
  }
);

export default PlasmicTaskCardActivitie;
/* prettier-ignore-end */
