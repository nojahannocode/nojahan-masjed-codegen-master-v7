// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: C6rVWRwZMhHZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import CoreHeaderMainHeader from "../../CoreHeaderMainHeader"; // plasmic-import: KN7IYHQF1AEV/component
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import CoreDescription from "../../CoreDescription"; // plasmic-import: Kw7q__mVGhml/component
import CoreCheckboxGroup from "../../CoreCheckboxGroup"; // plasmic-import: Mc0VBpijIxyn/component
import CoreCheckbox from "../../CoreCheckbox"; // plasmic-import: D_XHct9FBU8q/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { ApiRequest } from "@/angel/ApiRequest"; // plasmic-import: ROItC2WG7mWi/codeComponent
import TaskTaskCard from "../../TaskTaskCard"; // plasmic-import: MvAqwlqnyI4K/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantslyy4ZuIrWoht } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: lyy4ZUIrWoht/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicTask.module.css"; // plasmic-import: C6rVWRwZMhHZ/css

import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: YW8jW_7M2k9A/icon

import { me as __fn_me } from "@/angel/me"; // plasmic-import: me/customFunction

createPlasmicElementProxy;

export type PlasmicTask__VariantMembers = {};
export type PlasmicTask__VariantsArgs = {};
type VariantPropType = keyof PlasmicTask__VariantsArgs;
export const PlasmicTask__VariantProps = new Array<VariantPropType>();

export type PlasmicTask__ArgsType = {};
type ArgPropType = keyof PlasmicTask__ArgsType;
export const PlasmicTask__ArgProps = new Array<ArgPropType>();

export type PlasmicTask__OverridesType = {
  root?: Flex__<"div">;
  coreHeaderMainHeader?: Flex__<typeof CoreHeaderMainHeader>;
  main?: Flex__<"div">;
  mentorCard?: Flex__<"div">;
  mentorAvatar?: Flex__<typeof AntdAvatar>;
  mentorName?: Flex__<"div">;
  role?: Flex__<"div">;
  mentorDetail?: Flex__<"div">;
  message?: Flex__<"div">;
  messageIcon2?: Flex__<"svg">;
  popover?: Flex__<typeof AntdPopover>;
  messageIcon?: Flex__<"svg">;
  task?: Flex__<typeof AntdSingleCollapse>;
  taskTitle?: Flex__<"div">;
  coreDescription?: Flex__<typeof CoreDescription>;
  subTask?: Flex__<typeof CoreCheckboxGroup>;
  option1?: Flex__<typeof CoreCheckbox>;
  option2?: Flex__<typeof CoreCheckbox>;
  taskList?: Flex__<"div">;
  apiRequestGetTaskList?: Flex__<typeof ApiRequest>;
  taskTaskCard?: Flex__<typeof TaskTaskCard>;
};

export interface DefaultTaskProps {}

const $$ = {
  me: __fn_me
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTask__RenderFunc(props: {
  variants: PlasmicTask__VariantsArgs;
  args: PlasmicTask__ArgsType;
  overrides: PlasmicTask__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "task[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "subTask[].value",
        type: "private",
        variableType: "array"
      },
      {
        path: "option1[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "option2[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "auth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("AuthorizationDetail"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "refetchMyActiveTask",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "refetchListAllTasks",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "apiRequestGetTaskList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequestGetTaskList.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequestGetTaskList.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantslyy4ZuIrWoht()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicTask.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicTask.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicTask.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicTask.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicTask.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicTask.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          onClick={async event => {
            const $steps = {};
          }}
        >
          <CoreHeaderMainHeader
            data-plasmic-name={"coreHeaderMainHeader"}
            data-plasmic-override={overrides.coreHeaderMainHeader}
            className={classNames("__wab_instance", sty.coreHeaderMainHeader)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
            dir={"rtl"}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__w0VP3)}
              dir={"rtl"}
            >
              <div
                data-plasmic-name={"mentorCard"}
                data-plasmic-override={overrides.mentorCard}
                className={classNames(projectcss.all, sty.mentorCard)}
                dir={"rtl"}
              >
                <AntdAvatar
                  data-plasmic-name={"mentorAvatar"}
                  data-plasmic-override={overrides.mentorAvatar}
                  className={classNames("__wab_instance", sty.mentorAvatar)}
                  letters={"AB"}
                  src={
                    "/plasmic/nojahan_masjed_new_code_gen_master/images/screenshot20250222174624Png.png"
                  }
                />

                <div className={classNames(projectcss.all, sty.freeBox__uNpl3)}>
                  <div
                    data-plasmic-name={"mentorName"}
                    data-plasmic-override={overrides.mentorName}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.mentorName
                    )}
                    dir={"rtl"}
                  >
                    {
                      "\u062d\u062c\u062a \u0627\u0644\u0627\u0633\u0644\u0627\u0645 \u062c\u0639\u0641\u0631 \u0628\u062f\u0631\u062e\u0627\u0646\u06cc"
                    }
                  </div>
                  <div
                    data-plasmic-name={"role"}
                    data-plasmic-override={overrides.role}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.role
                    )}
                    dir={"rtl"}
                  >
                    {
                      "\u0627\u0645\u0627\u0645 \u062c\u0645\u0627\u0639\u062a \u0645\u0633\u062c\u062f \u062d\u0636\u0631\u062a \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633)"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"mentorDetail"}
                  data-plasmic-override={overrides.mentorDetail}
                  className={classNames(projectcss.all, sty.mentorDetail)}
                >
                  <div
                    data-plasmic-name={"message"}
                    data-plasmic-override={overrides.message}
                    className={classNames(projectcss.all, sty.message)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToChat"] = true
                        ? (() => {
                            const actionArgs = { destination: `/chat` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToChat"] != null &&
                        typeof $steps["goToChat"] === "object" &&
                        typeof $steps["goToChat"].then === "function"
                      ) {
                        $steps["goToChat"] = await $steps["goToChat"];
                      }
                    }}
                  >
                    <Icon9Icon
                      data-plasmic-name={"messageIcon2"}
                      data-plasmic-override={overrides.messageIcon2}
                      className={classNames(projectcss.all, sty.messageIcon2)}
                      role={"img"}
                    />

                    <AntdPopover
                      data-plasmic-name={"popover"}
                      data-plasmic-override={overrides.popover}
                      arrow={true}
                      className={classNames("__wab_instance", sty.popover)}
                      content={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0MJoC
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__d1S47
                            )}
                          >
                            {
                              "\u0633\u0644\u0627\u0645 \u0634\u0647\u0631\u0627\u0645\n\u0627\u0645\u0631\u0648\u0632 \u0628\u0627\u06cc\u062f \u0632\u0648\u062f \u062a\u0631 \u0628\u06cc\u0627\u06cc \u0645\u0633\u062c\u062f"
                            }
                          </div>
                        </div>
                      }
                      contentText={"Popover contents"}
                      defaultOpen={true}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      mouseEnterDelay={0}
                      mouseLeaveDelay={0}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "popover",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, ["popover", "open"])}
                      placement={"bottom"}
                      popoverScopeClassName={sty["popover__popover"]}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wvy6U
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qEneL
                            )}
                          >
                            {
                              "\u0622\u062e\u0631\u06cc\u0646 \u067e\u06cc\u0627\u0645"
                            }
                          </div>
                        </div>
                      }
                    >
                      <Icon9Icon
                        data-plasmic-name={"messageIcon"}
                        data-plasmic-override={overrides.messageIcon}
                        className={classNames(projectcss.all, sty.messageIcon)}
                        role={"img"}
                      />
                    </AntdPopover>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ncffs
                      )}
                    >
                      {"1"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__ntxS)}
              dir={"rtl"}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__slSDa)}
                dir={"rtl"}
                onClick={async event => {
                  const $steps = {};

                  $steps["runInteractionProp"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runInteractionProp"] != null &&
                    typeof $steps["runInteractionProp"] === "object" &&
                    typeof $steps["runInteractionProp"].then === "function"
                  ) {
                    $steps["runInteractionProp"] = await $steps[
                      "runInteractionProp"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___18Dun)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s0Kid
                    )}
                    dir={"rtl"}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u0645\u0633\u0626\u0648\u0644\u06cc\u062a\u200c\u0647\u0627\u06cc \u0645\u0646"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      bordered: true,
                      className: classNames("__wab_instance", sty.task),
                      defaultOpen: false,
                      destroyInactivePanel: false,
                      expandIconPosition: "start",
                      ghost: false,
                      headerClass: classNames({
                        [sty["pcls_wXAWBd2Bhv9P"]]: true
                      }),
                      key: currentIndex,
                      label2: (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bKVo5
                          )}
                        >
                          <div
                            data-plasmic-name={"taskTitle"}
                            data-plasmic-override={overrides.taskTitle}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.taskTitle
                            )}
                            dir={"rtl"}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0631\u062a\u0628 \u06a9\u0631\u062f\u0646 \u06a9\u062a\u0627\u0628\u062e\u0627\u0646\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      ),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "open",
                          ["task", __plasmic_idx_0, "open"],
                          AntdSingleCollapse_Helpers
                        ).apply(null, eventArgs);
                      },
                      open: generateStateValueProp($state, [
                        "task",
                        __plasmic_idx_0,
                        "open"
                      ]),
                      showArrow: true
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "open",
                          plasmicStateName: "task[].open"
                        }
                      ],
                      [__plasmic_idx_0],
                      AntdSingleCollapse_Helpers ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "task[].open",
                          initFunc: ({ $props, $state, $queries }) => false
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <AntdSingleCollapse
                        data-plasmic-name={"task"}
                        data-plasmic-override={overrides.task}
                        {...child$Props}
                      >
                        <CoreDescription
                          data-plasmic-name={"coreDescription"}
                          data-plasmic-override={overrides.coreDescription}
                          className={classNames(
                            "__wab_instance",
                            sty.coreDescription
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__do9Ic
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.description;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a: ......";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </CoreDescription>
                        <CoreCheckboxGroup
                          data-plasmic-name={"subTask"}
                          data-plasmic-override={overrides.subTask}
                          className={classNames("__wab_instance", sty.subTask)}
                          description={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rCkot
                              )}
                            >
                              {"Description..."}
                            </div>
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yRmQv
                              )}
                              dir={"rtl"}
                            >
                              {
                                "\u0631\u06cc\u0632 \u0645\u0633\u0626\u0648\u0644\u06cc\u062a\u200c\u0647\u0627"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subTask",
                              __plasmic_idx_0,
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          options={
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__b1DD
                              )}
                            >
                              <CoreCheckbox
                                data-plasmic-name={"option1"}
                                data-plasmic-override={overrides.option1}
                                className={classNames(
                                  "__wab_instance",
                                  sty.option1
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__g4P7Y
                                    )}
                                  >
                                    {
                                      "\u0645\u0631\u062a\u0628 \u06a9\u0631\u062f\u0646 \u0642\u0631\u0622\u0646\u200c\u0647\u0627"
                                    }
                                  </div>
                                }
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "option1",
                                    __plasmic_idx_0,
                                    "isSelected"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                value={"option1"}
                              />

                              <CoreCheckbox
                                data-plasmic-name={"option2"}
                                data-plasmic-override={overrides.option2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.option2
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gZqSn
                                    )}
                                  >
                                    {
                                      "\u0645\u0631\u062a\u0628 \u06a9\u0631\u062f\u0646 \u0627\u062f\u0639\u06cc\u0647"
                                    }
                                  </div>
                                }
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "option2",
                                    __plasmic_idx_0,
                                    "isSelected"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                value={"option2"}
                              />
                            </Stack__>
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fl74M
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mczyx
                            )}
                          />

                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aprUz
                            )}
                          >
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__hgD2
                              )}
                              onClick={async () => {
                                const $steps = {};

                                $steps["postgresUpdateMany"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "hfKFoF6NHFakDLEE3BFPLz",
                                          opId: "d21ddc5a-834e-4d98-abdb-d6e8a5a0abc6",
                                          userArgs: {
                                            params: [currentItem.id],
                                            headers: [$state.auth.token]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["postgresUpdateMany"] != null &&
                                  typeof $steps["postgresUpdateMany"] ===
                                    "object" &&
                                  typeof $steps["postgresUpdateMany"].then ===
                                    "function"
                                ) {
                                  $steps["postgresUpdateMany"] = await $steps[
                                    "postgresUpdateMany"
                                  ];
                                }

                                $steps["updateRefetchMyActiveTask"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["refetchMyActiveTask"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateRefetchMyActiveTask"] != null &&
                                  typeof $steps["updateRefetchMyActiveTask"] ===
                                    "object" &&
                                  typeof $steps["updateRefetchMyActiveTask"]
                                    .then === "function"
                                ) {
                                  $steps["updateRefetchMyActiveTask"] =
                                    await $steps["updateRefetchMyActiveTask"];
                                }

                                $steps["updateRefetchListAllTasks"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["refetchListAllTasks"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateRefetchListAllTasks"] != null &&
                                  typeof $steps["updateRefetchListAllTasks"] ===
                                    "object" &&
                                  typeof $steps["updateRefetchListAllTasks"]
                                    .then === "function"
                                ) {
                                  $steps["updateRefetchListAllTasks"] =
                                    await $steps["updateRefetchListAllTasks"];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4FKrm
                                )}
                              >
                                {"\u0627\u0646\u0635\u0631\u0627\u0641"}
                              </div>
                            </AntdButton>
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__ohvmk
                              )}
                              onClick={async () => {
                                const $steps = {};

                                $steps["httpPost"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "hfKFoF6NHFakDLEE3BFPLz",
                                          opId: "7c5a417e-3d99-47bc-9aae-27c2c64841b4",
                                          userArgs: {
                                            params: [currentItem.id],
                                            headers: [$state.auth.token]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["httpPost"] != null &&
                                  typeof $steps["httpPost"] === "object" &&
                                  typeof $steps["httpPost"].then === "function"
                                ) {
                                  $steps["httpPost"] = await $steps["httpPost"];
                                }

                                $steps["updateRefetchMyActiveTask"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["refetchMyActiveTask"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateRefetchMyActiveTask"] != null &&
                                  typeof $steps["updateRefetchMyActiveTask"] ===
                                    "object" &&
                                  typeof $steps["updateRefetchMyActiveTask"]
                                    .then === "function"
                                ) {
                                  $steps["updateRefetchMyActiveTask"] =
                                    await $steps["updateRefetchMyActiveTask"];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "success",
                                          "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u062a\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                                        ]
                                      };
                                      return $globalActions[
                                        "plasmic-antd5-config-provider.showNotification"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5PxHf
                                )}
                              >
                                {"\u0627\u0646\u062c\u0627\u0645 \u0634\u062f"}
                              </div>
                            </AntdButton>
                          </Stack__>
                        </div>
                      </AntdSingleCollapse>
                    );
                  })();
                })}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wZfeZ)}>
                <div
                  data-plasmic-name={"taskList"}
                  data-plasmic-override={overrides.taskList}
                  className={classNames(projectcss.all, sty.taskList)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fqNs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mrqmd
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "https://noapi.darkube.app/webhook/usertasks",
                                  undefined,
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        headers: { "x-token": $$.me()?.token }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Angel.apiRequest"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u0645\u0633\u0626\u0648\u0644\u06cc\u062a\u200c\u0647\u0627"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__dVlO)}>
                  <ApiRequest
                    data-plasmic-name={"apiRequestGetTaskList"}
                    data-plasmic-override={overrides.apiRequestGetTaskList}
                    className={classNames(
                      "__wab_instance",
                      sty.apiRequestGetTaskList
                    )}
                    config={(() => {
                      try {
                        return {
                          headers: { "X-token": $$.me("token") }
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    errorDisplay={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nk2Qr
                        )}
                      >
                        {"Error fetching data"}
                      </div>
                    }
                    loadingDisplay={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cWlh
                        )}
                      >
                        {"Loading..."}
                      </div>
                    }
                    method={"GET"}
                    onError={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "apiRequestGetTaskList",
                        "error"
                      ]).apply(null, eventArgs);
                    }}
                    onLoading={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "apiRequestGetTaskList",
                        "loading"
                      ]).apply(null, eventArgs);
                    }}
                    onSuccess={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "apiRequestGetTaskList",
                        "data"
                      ]).apply(null, eventArgs);
                    }}
                    url={"https://noapi.darkube.app/webhook/usertasks"}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.apiRequestGetTaskList.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <TaskTaskCard
                          data-plasmic-name={"taskTaskCard"}
                          data-plasmic-override={overrides.taskTaskCard}
                          className={classNames(
                            "__wab_instance",
                            sty.taskTaskCard
                          )}
                          description={(() => {
                            try {
                              return currentItem.description;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          id={(() => {
                            try {
                              return currentItem.id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          time={(() => {
                            try {
                              return currentItem.time;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          title={(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </ApiRequest>
                </div>
              </div>
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "coreHeaderMainHeader",
    "main",
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon",
    "task",
    "taskTitle",
    "coreDescription",
    "subTask",
    "option1",
    "option2",
    "taskList",
    "apiRequestGetTaskList",
    "taskTaskCard"
  ],
  coreHeaderMainHeader: ["coreHeaderMainHeader"],
  main: [
    "main",
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon",
    "task",
    "taskTitle",
    "coreDescription",
    "subTask",
    "option1",
    "option2",
    "taskList",
    "apiRequestGetTaskList",
    "taskTaskCard"
  ],
  mentorCard: [
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon"
  ],
  mentorAvatar: ["mentorAvatar"],
  mentorName: ["mentorName"],
  role: ["role"],
  mentorDetail: [
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon"
  ],
  message: ["message", "messageIcon2", "popover", "messageIcon"],
  messageIcon2: ["messageIcon2"],
  popover: ["popover", "messageIcon"],
  messageIcon: ["messageIcon"],
  task: [
    "task",
    "taskTitle",
    "coreDescription",
    "subTask",
    "option1",
    "option2"
  ],
  taskTitle: ["taskTitle"],
  coreDescription: ["coreDescription"],
  subTask: ["subTask", "option1", "option2"],
  option1: ["option1"],
  option2: ["option2"],
  taskList: ["taskList"],
  apiRequestGetTaskList: ["apiRequestGetTaskList", "taskTaskCard"],
  taskTaskCard: ["taskTaskCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  coreHeaderMainHeader: typeof CoreHeaderMainHeader;
  main: "div";
  mentorCard: "div";
  mentorAvatar: typeof AntdAvatar;
  mentorName: "div";
  role: "div";
  mentorDetail: "div";
  message: "div";
  messageIcon2: "svg";
  popover: typeof AntdPopover;
  messageIcon: "svg";
  task: typeof AntdSingleCollapse;
  taskTitle: "div";
  coreDescription: typeof CoreDescription;
  subTask: typeof CoreCheckboxGroup;
  option1: typeof CoreCheckbox;
  option2: typeof CoreCheckbox;
  taskList: "div";
  apiRequestGetTaskList: typeof ApiRequest;
  taskTaskCard: typeof TaskTaskCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTask__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTask__VariantsArgs;
    args?: PlasmicTask__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTask__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTask__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTask__ArgProps,
          internalVariantPropNames: PlasmicTask__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTask__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTask";
  } else {
    func.displayName = `PlasmicTask.${nodeName}`;
  }
  return func;
}

export const PlasmicTask = Object.assign(
  // Top-level PlasmicTask renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    coreHeaderMainHeader: makeNodeComponent("coreHeaderMainHeader"),
    main: makeNodeComponent("main"),
    mentorCard: makeNodeComponent("mentorCard"),
    mentorAvatar: makeNodeComponent("mentorAvatar"),
    mentorName: makeNodeComponent("mentorName"),
    role: makeNodeComponent("role"),
    mentorDetail: makeNodeComponent("mentorDetail"),
    message: makeNodeComponent("message"),
    messageIcon2: makeNodeComponent("messageIcon2"),
    popover: makeNodeComponent("popover"),
    messageIcon: makeNodeComponent("messageIcon"),
    task: makeNodeComponent("task"),
    taskTitle: makeNodeComponent("taskTitle"),
    coreDescription: makeNodeComponent("coreDescription"),
    subTask: makeNodeComponent("subTask"),
    option1: makeNodeComponent("option1"),
    option2: makeNodeComponent("option2"),
    taskList: makeNodeComponent("taskList"),
    apiRequestGetTaskList: makeNodeComponent("apiRequestGetTaskList"),
    taskTaskCard: makeNodeComponent("taskTaskCard"),

    // Metadata about props expected for PlasmicTask
    internalVariantProps: PlasmicTask__VariantProps,
    internalArgProps: PlasmicTask__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "نوجهان",
      description:
        "در این صفحه میتوانید مسئولیت‌های قابل پذیرش را مشاهده کنید و هر کدام را که تمایل داشتید انتخاب کنید",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTask;
/* prettier-ignore-end */
