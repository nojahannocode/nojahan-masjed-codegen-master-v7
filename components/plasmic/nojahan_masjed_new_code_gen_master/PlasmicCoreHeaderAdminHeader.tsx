// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: ZTGMlsvVVp1c

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import AuthLoginComponent from "../../AuthLoginComponent"; // plasmic-import: Tm95Yqly1EMg/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantslyy4ZuIrWoht } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: lyy4ZUIrWoht/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicCoreHeaderAdminHeader.module.css"; // plasmic-import: ZTGMlsvVVp1c/css

import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: pvRfclCatxOV/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: YW8jW_7M2k9A/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: ELgPVVGypR9T/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: 1XX1FqE2P08x/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: wumpzot6JlJS/icon
import LogoNoSvgIcon from "./icons/PlasmicIcon__LogoNoSvg"; // plasmic-import: Bi9ZoqrIWUrr/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: 6qMjah-m2ZUu/icon

import { me as __fn_me } from "@/angel/me"; // plasmic-import: me/customFunction

createPlasmicElementProxy;

export type PlasmicCoreHeaderAdminHeader__VariantMembers = {};
export type PlasmicCoreHeaderAdminHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicCoreHeaderAdminHeader__VariantsArgs;
export const PlasmicCoreHeaderAdminHeader__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCoreHeaderAdminHeader__ArgsType = {};
type ArgPropType = keyof PlasmicCoreHeaderAdminHeader__ArgsType;
export const PlasmicCoreHeaderAdminHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicCoreHeaderAdminHeader__OverridesType = {
  root?: Flex__<"div">;
  drawer?: Flex__<typeof AntdDrawer>;
  mentorCard?: Flex__<"div">;
  mentorAvatar?: Flex__<typeof AntdAvatar>;
  mentorName?: Flex__<"div">;
  role?: Flex__<"div">;
  mentorDetail?: Flex__<"div">;
  message?: Flex__<"div">;
  messageIcon2?: Flex__<"svg">;
  popover?: Flex__<typeof AntdPopover>;
  messageIcon?: Flex__<"svg">;
  hr2?: Flex__<"div">;
  hr?: Flex__<"div">;
  loginModalDrawer?: Flex__<typeof AntdModal>;
  loginComponent2?: Flex__<typeof AuthLoginComponent>;
  modal2?: Flex__<typeof AntdModal>;
  loginComponent3?: Flex__<typeof AuthLoginComponent>;
};

export interface DefaultCoreHeaderAdminHeaderProps {
  className?: string;
}

const $$ = {
  me: __fn_me
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCoreHeaderAdminHeader__RenderFunc(props: {
  variants: PlasmicCoreHeaderAdminHeader__VariantsArgs;
  args: PlasmicCoreHeaderAdminHeader__ArgsType;
  overrides: PlasmicCoreHeaderAdminHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginModalDrawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginComponent2.loginDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loginComponent3.loginDetail",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "auth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("AuthorizationDetail"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantslyy4ZuIrWoht()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__krdfk)}
        dir={"rtl"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__vIyM9)}>
          <Icon11Icon
            className={classNames(projectcss.all, sty.svg__hIkA)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDrawerOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["drawer", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDrawerOpen"] != null &&
                typeof $steps["updateDrawerOpen"] === "object" &&
                typeof $steps["updateDrawerOpen"].then === "function"
              ) {
                $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
              }
            }}
            role={"img"}
          />

          <AntdDrawer
            data-plasmic-name={"drawer"}
            data-plasmic-override={overrides.drawer}
            className={classNames("__wab_instance", sty.drawer)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            drawerScopeClassName={sty["drawer__drawer"]}
            footer={
              (() => {
                try {
                  return !$$.me()?.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__ugzUn)}>
                  <AntdModal
                    data-plasmic-name={"modal2"}
                    data-plasmic-override={overrides.modal2}
                    className={classNames("__wab_instance", sty.modal2)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__awgdw
                        )}
                      />
                    }
                    modalScopeClassName={sty["modal2__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal2",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, ["modal2", "open"])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ie3Wi
                        )}
                      />
                    }
                    trigger={
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__rfw4B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5XX9N
                          )}
                        >
                          {"\u0648\u0631\u0648\u062f \u0645\u062f\u06cc\u0631"}
                        </div>
                      </AntdButton>
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nnKaa)}
                    >
                      <AuthLoginComponent
                        data-plasmic-name={"loginComponent3"}
                        data-plasmic-override={overrides.loginComponent3}
                        className={classNames(
                          "__wab_instance",
                          sty.loginComponent3
                        )}
                        loginDetail={generateStateValueProp($state, [
                          "loginComponent3",
                          "loginDetail"
                        ])}
                        onLoginDetailChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "loginComponent3",
                            "loginDetail"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        roleProp={"admin"}
                      />
                    </div>
                  </AntdModal>
                </div>
              ) : null
            }
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["drawer", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["drawer", "open"])}
            title={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__baEav
                  )}
                >
                  {""}
                </div>
                <LogoNoSvgIcon
                  className={classNames(projectcss.all, sty.svg___6V9Uy)}
                  role={"img"}
                />
              </React.Fragment>
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__d3Np)}>
              {(() => {
                try {
                  return !!$$.me()?.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___7Smq9)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHome"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHome"] != null &&
                      typeof $steps["goToHome"] === "object" &&
                      typeof $steps["goToHome"].then === "function"
                    ) {
                      $steps["goToHome"] = await $steps["goToHome"];
                    }

                    $steps["updateDrawerOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drawer", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDrawerOpen"] != null &&
                      typeof $steps["updateDrawerOpen"] === "object" &&
                      typeof $steps["updateDrawerOpen"].then === "function"
                    ) {
                      $steps["updateDrawerOpen"] = await $steps[
                        "updateDrawerOpen"
                      ];
                    }
                  }}
                >
                  <div
                    data-plasmic-name={"mentorCard"}
                    data-plasmic-override={overrides.mentorCard}
                    className={classNames(projectcss.all, sty.mentorCard)}
                    dir={"rtl"}
                  >
                    <AntdAvatar
                      data-plasmic-name={"mentorAvatar"}
                      data-plasmic-override={overrides.mentorAvatar}
                      className={classNames("__wab_instance", sty.mentorAvatar)}
                      letters={"AB"}
                      src={
                        "/plasmic/nojahan_masjed_new_code_gen_master/images/screenshot20250222174624Png.png"
                      }
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__pxut)}
                    >
                      <div
                        data-plasmic-name={"mentorName"}
                        data-plasmic-override={overrides.mentorName}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.mentorName
                        )}
                        dir={"rtl"}
                      >
                        {
                          "\u062d\u062c\u062a \u0627\u0644\u0627\u0633\u0644\u0627\u0645 \u062c\u0639\u0641\u0631 \u0628\u062f\u0631\u062e\u0627\u0646\u06cc"
                        }
                      </div>
                      <div
                        data-plasmic-name={"role"}
                        data-plasmic-override={overrides.role}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.role
                        )}
                        dir={"rtl"}
                      >
                        {
                          "\u0627\u0645\u0627\u0645 \u062c\u0645\u0627\u0639\u062a \u0645\u0633\u062c\u062f \u062d\u0636\u0631\u062a \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633)"
                        }
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"mentorDetail"}
                      data-plasmic-override={overrides.mentorDetail}
                      className={classNames(projectcss.all, sty.mentorDetail)}
                    >
                      <div
                        data-plasmic-name={"message"}
                        data-plasmic-override={overrides.message}
                        className={classNames(projectcss.all, sty.message)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToChat"] = true
                            ? (() => {
                                const actionArgs = { destination: `/chat` };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToChat"] != null &&
                            typeof $steps["goToChat"] === "object" &&
                            typeof $steps["goToChat"].then === "function"
                          ) {
                            $steps["goToChat"] = await $steps["goToChat"];
                          }
                        }}
                      >
                        <Icon9Icon
                          data-plasmic-name={"messageIcon2"}
                          data-plasmic-override={overrides.messageIcon2}
                          className={classNames(
                            projectcss.all,
                            sty.messageIcon2
                          )}
                          role={"img"}
                        />

                        <AntdPopover
                          data-plasmic-name={"popover"}
                          data-plasmic-override={overrides.popover}
                          arrow={true}
                          className={classNames("__wab_instance", sty.popover)}
                          content={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nO59N
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9OQHt
                                )}
                              >
                                {
                                  "\u0633\u0644\u0627\u0645 \u0634\u0647\u0631\u0627\u0645\n\u0627\u0645\u0631\u0648\u0632 \u0628\u0627\u06cc\u062f \u0632\u0648\u062f \u062a\u0631 \u0628\u06cc\u0627\u06cc \u0645\u0633\u062c\u062f"
                                }
                              </div>
                            </div>
                          }
                          contentText={"Popover contents"}
                          defaultOpen={true}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mouseEnterDelay={0}
                          mouseLeaveDelay={0}
                          onOpenChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "popover",
                              "open"
                            ]).apply(null, eventArgs);
                          }}
                          open={generateStateValueProp($state, [
                            "popover",
                            "open"
                          ])}
                          placement={"bottom"}
                          popoverScopeClassName={sty["popover__popover"]}
                          title={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__v8Cxm
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__faQiM
                                )}
                              >
                                {
                                  "\u0622\u062e\u0631\u06cc\u0646 \u067e\u06cc\u0627\u0645"
                                }
                              </div>
                            </div>
                          }
                        >
                          <Icon9Icon
                            data-plasmic-name={"messageIcon"}
                            data-plasmic-override={overrides.messageIcon}
                            className={classNames(
                              projectcss.all,
                              sty.messageIcon
                            )}
                            role={"img"}
                          />
                        </AntdPopover>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m5C0U
                          )}
                        >
                          {"1"}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__n6TAs)}>
                <div
                  data-plasmic-name={"hr2"}
                  data-plasmic-override={overrides.hr2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.hr2
                  )}
                >
                  {""}
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__uzfI8)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHome"] = true
                    ? (() => {
                        const actionArgs = { destination: `/admin/activities` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHome"] != null &&
                    typeof $steps["goToHome"] === "object" &&
                    typeof $steps["goToHome"].then === "function"
                  ) {
                    $steps["goToHome"] = await $steps["goToHome"];
                  }

                  $steps["updateDrawerOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["drawer", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDrawerOpen"] != null &&
                    typeof $steps["updateDrawerOpen"] === "object" &&
                    typeof $steps["updateDrawerOpen"].then === "function"
                  ) {
                    $steps["updateDrawerOpen"] = await $steps[
                      "updateDrawerOpen"
                    ];
                  }
                }}
              >
                <Icon12Icon
                  className={classNames(projectcss.all, sty.svg___63Ktn)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fzeq
                  )}
                >
                  {"\u062e\u0627\u0646\u0647"}
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__soJce)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDrawerOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["drawer", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDrawerOpen"] != null &&
                    typeof $steps["updateDrawerOpen"] === "object" &&
                    typeof $steps["updateDrawerOpen"].then === "function"
                  ) {
                    $steps["updateDrawerOpen"] = await $steps[
                      "updateDrawerOpen"
                    ];
                  }
                }}
              >
                <Icon14Icon
                  className={classNames(projectcss.all, sty.svg__bYpgg)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dOeRf
                  )}
                >
                  {
                    "\u0645\u0634\u0627\u0647\u062f\u0647 \u06af\u0641\u062a\u200c\u0648\u06af\u0648\u0647\u0627"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__uacdh)}>
                <div
                  data-plasmic-name={"hr"}
                  data-plasmic-override={overrides.hr}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.hr
                  )}
                >
                  {""}
                </div>
              </div>
              {(() => {
                try {
                  return !!$$.me()?.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__o8LP,
                    "cursor-pointer"
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["deleteLocalStorage"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (typeof window !== "undefined")
                                  return localStorage.removeItem("auth");
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["deleteLocalStorage"] != null &&
                      typeof $steps["deleteLocalStorage"] === "object" &&
                      typeof $steps["deleteLocalStorage"].then === "function"
                    ) {
                      $steps["deleteLocalStorage"] = await $steps[
                        "deleteLocalStorage"
                      ];
                    }

                    $steps["successNotification"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "success",
                              "\u062e\u0631\u0648\u062c \u0627\u0632 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                            ]
                          };
                          return $globalActions[
                            "plasmic-antd5-config-provider.showNotification"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["successNotification"] != null &&
                      typeof $steps["successNotification"] === "object" &&
                      typeof $steps["successNotification"].then === "function"
                    ) {
                      $steps["successNotification"] = await $steps[
                        "successNotification"
                      ];
                    }

                    $steps["updateDrawerOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drawer", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDrawerOpen"] != null &&
                      typeof $steps["updateDrawerOpen"] === "object" &&
                      typeof $steps["updateDrawerOpen"].then === "function"
                    ) {
                      $steps["updateDrawerOpen"] = await $steps[
                        "updateDrawerOpen"
                      ];
                    }
                  }}
                >
                  <Icon13Icon
                    className={classNames(projectcss.all, sty.svg__iIGj)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rfIgx,
                      "cursor-pointer"
                    )}
                  >
                    {
                      "\u062e\u0631\u0648\u062c \u0627\u0632 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc\n"
                    }
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return !$$.me()?.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__kjMtd)}
                  onClick={async event => {
                    const $steps = {};
                  }}
                >
                  <AntdModal
                    data-plasmic-name={"loginModalDrawer"}
                    data-plasmic-override={overrides.loginModalDrawer}
                    className={classNames(
                      "__wab_instance",
                      sty.loginModalDrawer
                    )}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qCcL0
                        )}
                      />
                    }
                    modalScopeClassName={sty["loginModalDrawer__modal"]}
                    onCancel={async () => {
                      const $steps = {};

                      $steps["updateLoginModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loginModalDrawer", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoginModalOpen"] != null &&
                        typeof $steps["updateLoginModalOpen"] === "object" &&
                        typeof $steps["updateLoginModalOpen"].then ===
                          "function"
                      ) {
                        $steps["updateLoginModalOpen"] = await $steps[
                          "updateLoginModalOpen"
                        ];
                      }
                    }}
                    onOk={async () => {
                      const $steps = {};
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "loginModalDrawer",
                        "open"
                      ]).apply(null, eventArgs);

                      (async open => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "loginModalDrawer",
                      "open"
                    ])}
                    title={null}
                    trigger={
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__yVtLg
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a6Jqu
                          )}
                        >
                          {
                            "\u0648\u0631\u0648\u062f \u0628\u0647 \u0646\u0648\u062c\u0647\u0627\u0646"
                          }
                        </div>
                      </AntdButton>
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__coto7)}
                    >
                      <AuthLoginComponent
                        data-plasmic-name={"loginComponent2"}
                        data-plasmic-override={overrides.loginComponent2}
                        className={classNames(
                          "__wab_instance",
                          sty.loginComponent2
                        )}
                        loginDetail={generateStateValueProp($state, [
                          "loginComponent2",
                          "loginDetail"
                        ])}
                        onLoginDetailChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "loginComponent2",
                            "loginDetail"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      />
                    </div>
                  </AntdModal>
                </div>
              ) : null}
            </div>
          </AntdDrawer>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___3U9VW)}>
          <LogoNoSvgIcon
            className={classNames(projectcss.all, sty.svg__i3VbA)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__m9IXf)}>
          <Icon15Icon
            className={classNames(projectcss.all, sty.svg__opN0P)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return window.history.back();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
            role={"img"}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "drawer",
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon",
    "hr2",
    "hr",
    "loginModalDrawer",
    "loginComponent2",
    "modal2",
    "loginComponent3"
  ],
  drawer: [
    "drawer",
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon",
    "hr2",
    "hr",
    "loginModalDrawer",
    "loginComponent2",
    "modal2",
    "loginComponent3"
  ],
  mentorCard: [
    "mentorCard",
    "mentorAvatar",
    "mentorName",
    "role",
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon"
  ],
  mentorAvatar: ["mentorAvatar"],
  mentorName: ["mentorName"],
  role: ["role"],
  mentorDetail: [
    "mentorDetail",
    "message",
    "messageIcon2",
    "popover",
    "messageIcon"
  ],
  message: ["message", "messageIcon2", "popover", "messageIcon"],
  messageIcon2: ["messageIcon2"],
  popover: ["popover", "messageIcon"],
  messageIcon: ["messageIcon"],
  hr2: ["hr2"],
  hr: ["hr"],
  loginModalDrawer: ["loginModalDrawer", "loginComponent2"],
  loginComponent2: ["loginComponent2"],
  modal2: ["modal2", "loginComponent3"],
  loginComponent3: ["loginComponent3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  drawer: typeof AntdDrawer;
  mentorCard: "div";
  mentorAvatar: typeof AntdAvatar;
  mentorName: "div";
  role: "div";
  mentorDetail: "div";
  message: "div";
  messageIcon2: "svg";
  popover: typeof AntdPopover;
  messageIcon: "svg";
  hr2: "div";
  hr: "div";
  loginModalDrawer: typeof AntdModal;
  loginComponent2: typeof AuthLoginComponent;
  modal2: typeof AntdModal;
  loginComponent3: typeof AuthLoginComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCoreHeaderAdminHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCoreHeaderAdminHeader__VariantsArgs;
    args?: PlasmicCoreHeaderAdminHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCoreHeaderAdminHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCoreHeaderAdminHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCoreHeaderAdminHeader__ArgProps,
          internalVariantPropNames: PlasmicCoreHeaderAdminHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCoreHeaderAdminHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCoreHeaderAdminHeader";
  } else {
    func.displayName = `PlasmicCoreHeaderAdminHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicCoreHeaderAdminHeader = Object.assign(
  // Top-level PlasmicCoreHeaderAdminHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    drawer: makeNodeComponent("drawer"),
    mentorCard: makeNodeComponent("mentorCard"),
    mentorAvatar: makeNodeComponent("mentorAvatar"),
    mentorName: makeNodeComponent("mentorName"),
    role: makeNodeComponent("role"),
    mentorDetail: makeNodeComponent("mentorDetail"),
    message: makeNodeComponent("message"),
    messageIcon2: makeNodeComponent("messageIcon2"),
    popover: makeNodeComponent("popover"),
    messageIcon: makeNodeComponent("messageIcon"),
    hr2: makeNodeComponent("hr2"),
    hr: makeNodeComponent("hr"),
    loginModalDrawer: makeNodeComponent("loginModalDrawer"),
    loginComponent2: makeNodeComponent("loginComponent2"),
    modal2: makeNodeComponent("modal2"),
    loginComponent3: makeNodeComponent("loginComponent3"),

    // Metadata about props expected for PlasmicCoreHeaderAdminHeader
    internalVariantProps: PlasmicCoreHeaderAdminHeader__VariantProps,
    internalArgProps: PlasmicCoreHeaderAdminHeader__ArgProps
  }
);

export default PlasmicCoreHeaderAdminHeader;
/* prettier-ignore-end */
