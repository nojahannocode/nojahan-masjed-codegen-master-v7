// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: 3uyfO7NANclf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicMessageChatComponent.module.css"; // plasmic-import: 3uyfO7NANclf/css

createPlasmicElementProxy;

export type PlasmicMessageChatComponent__VariantMembers = {};
export type PlasmicMessageChatComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicMessageChatComponent__VariantsArgs;
export const PlasmicMessageChatComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMessageChatComponent__ArgsType = {
  firstName?: string;
  lastName?: string;
  message?: string;
  avatart?: string;
};
type ArgPropType = keyof PlasmicMessageChatComponent__ArgsType;
export const PlasmicMessageChatComponent__ArgProps = new Array<ArgPropType>(
  "firstName",
  "lastName",
  "message",
  "avatart"
);

export type PlasmicMessageChatComponent__OverridesType = {
  root?: Flex__<"div">;
  avatar?: Flex__<typeof AntdAvatar>;
};

export interface DefaultMessageChatComponentProps {
  firstName?: string;
  lastName?: string;
  message?: string;
  avatart?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMessageChatComponent__RenderFunc(props: {
  variants: PlasmicMessageChatComponent__VariantsArgs;
  args: PlasmicMessageChatComponent__ArgsType;
  overrides: PlasmicMessageChatComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          firstName: "\u0646\u0627\u0645",
          lastName:
            "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc",
          message: "\u067e\u06cc\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__dQe)} dir={"rtl"}>
        <AntdAvatar
          data-plasmic-name={"avatar"}
          data-plasmic-override={overrides.avatar}
          className={classNames("__wab_instance", sty.avatar)}
          letters={"AB"}
          src={(() => {
            try {
              return $props.avatart;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <div className={classNames(projectcss.all, sty.freeBox__ai8Vh)}>
          <div className={classNames(projectcss.all, sty.freeBox__qvLdJ)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gvniq
              )}
              dir={"rtl"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.firstName;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cycLl
              )}
              dir={"rtl"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.lastName;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gxSb
            )}
            dir={"rtl"}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.message;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u067e\u06cc\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "avatar"],
  avatar: ["avatar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof AntdAvatar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMessageChatComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMessageChatComponent__VariantsArgs;
    args?: PlasmicMessageChatComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMessageChatComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMessageChatComponent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMessageChatComponent__ArgProps,
          internalVariantPropNames: PlasmicMessageChatComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMessageChatComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMessageChatComponent";
  } else {
    func.displayName = `PlasmicMessageChatComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicMessageChatComponent = Object.assign(
  // Top-level PlasmicMessageChatComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),

    // Metadata about props expected for PlasmicMessageChatComponent
    internalVariantProps: PlasmicMessageChatComponent__VariantProps,
    internalArgProps: PlasmicMessageChatComponent__ArgProps
  }
);

export default PlasmicMessageChatComponent;
/* prettier-ignore-end */
