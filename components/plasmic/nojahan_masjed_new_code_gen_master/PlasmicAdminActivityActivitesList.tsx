// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x5n9pjkHvzguzBipVWhAiz
// Component: VlMYCqzuHxtq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CoreHeaderAdminHeader from "../../CoreHeaderAdminHeader"; // plasmic-import: ZTGMlsvVVp1c/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { ApiRequest } from "@/angel/ApiRequest"; // plasmic-import: ROItC2WG7mWi/codeComponent
import Empty from "../../Empty"; // plasmic-import: 00BG3jmDg3a5/component
import TaskCardActivitie from "../../TaskCardActivitie"; // plasmic-import: 8x-tDBj79ns0/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x5n9pjkHvzguzBipVWhAiz/projectcss
import sty from "./PlasmicAdminActivityActivitesList.module.css"; // plasmic-import: VlMYCqzuHxtq/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: XASChn-p69Is/icon

import { me as __fn_me } from "@/angel/me"; // plasmic-import: me/customFunction

createPlasmicElementProxy;

export type PlasmicAdminActivityActivitesList__VariantMembers = {};
export type PlasmicAdminActivityActivitesList__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminActivityActivitesList__VariantsArgs;
export const PlasmicAdminActivityActivitesList__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAdminActivityActivitesList__ArgsType = {};
type ArgPropType = keyof PlasmicAdminActivityActivitesList__ArgsType;
export const PlasmicAdminActivityActivitesList__ArgProps =
  new Array<ArgPropType>();

export type PlasmicAdminActivityActivitesList__OverridesType = {
  root?: Flex__<"div">;
  coreHeaderAdminHeader?: Flex__<typeof CoreHeaderAdminHeader>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  svg?: Flex__<"svg">;
  getActiveActivities?: Flex__<typeof ApiRequest>;
  getInActiveActivities?: Flex__<typeof ApiRequest>;
};

export interface DefaultAdminActivityActivitesListProps {}

const $$ = {
  me: __fn_me
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminActivityActivitesList__RenderFunc(props: {
  variants: PlasmicAdminActivityActivitesList__VariantsArgs;
  args: PlasmicAdminActivityActivitesList__ArgsType;
  overrides: PlasmicAdminActivityActivitesList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "auth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("AuthorizationDetail"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "getActiveActivities.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getActiveActivities.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getActiveActivities.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInActiveActivities.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInActiveActivities.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getInActiveActivities.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <CoreHeaderAdminHeader
            data-plasmic-name={"coreHeaderAdminHeader"}
            data-plasmic-override={overrides.coreHeaderAdminHeader}
            className={classNames("__wab_instance", sty.coreHeaderAdminHeader)}
          />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__yWtKh)} />
            }
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={
              <AntdButton
                className={classNames("__wab_instance", sty.button__fDt0X)}
              >
                <Icon16Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </AntdButton>
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__uDctu)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);

                    (async (changedValues, allValues) => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  },
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onFinish: async values => {
                    const $steps = {};

                    $steps["add"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://noapi.darkube.app/webhook/activity",
                              undefined,
                              (() => {
                                try {
                                  return $state.form.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    headers: { "x-token": $$.me()?.token }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Angel.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["add"] != null &&
                      typeof $steps["add"] === "object" &&
                      typeof $steps["add"].then === "function"
                    ) {
                      $steps["add"] = await $steps["add"];
                    }

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }

                    $steps["goToAdminActivityActivitesList"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/admin/activities`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToAdminActivityActivitesList"] != null &&
                      typeof $steps["goToAdminActivityActivitesList"] ===
                        "object" &&
                      typeof $steps["goToAdminActivityActivitesList"].then ===
                        "function"
                    ) {
                      $steps["goToAdminActivityActivitesList"] = await $steps[
                        "goToAdminActivityActivitesList"
                      ];
                    }
                  },
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__wYs7
                      )}
                      label={
                        "\u0646\u0627\u0645 \u0641\u0639\u0627\u0644\u06cc\u062a"
                      }
                      name={"name"}
                      rules={[
                        {
                          ruleType: "required",
                          message:
                            "\u0641\u06cc\u0644\u062f \u0636\u0631\u0648\u0631\u06cc"
                        }
                      ]}
                    >
                      <AntdInput
                        className={classNames("__wab_instance", sty.input)}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__bYgk6
                      )}
                      initialValue={"male"}
                      label={"\u062c\u0646\u0633\u06cc\u062a"}
                      name={"gender"}
                    >
                      <AntdSelect
                        className={classNames(
                          "__wab_instance",
                          sty.select__lfxvJ
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        options={(() => {
                          const __composite = [
                            { type: "option", label: null, value: null },
                            { type: "option", label: null, value: null },
                            { type: "option", label: null, value: null }
                          ];
                          __composite["0"]["label"] = "\u0645\u0631\u062f";
                          __composite["0"]["value"] = "male";
                          __composite["1"]["label"] = "\u0632\u0646";
                          __composite["1"]["value"] = "female";
                          __composite["2"]["label"] =
                            "\u0647\u0631 \u062f\u0648";
                          __composite["2"]["value"] = "both";
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["select__lfxvJ__popup"]}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__blO9C
                      )}
                      initialValue={"active"}
                      label={"\u0648\u0636\u0639\u06cc\u062a"}
                      name={"status"}
                    >
                      <AntdSelect
                        className={classNames(
                          "__wab_instance",
                          sty.select___9TBDt
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        options={(() => {
                          const __composite = [
                            { type: "option", label: null, value: null },
                            { type: "option", label: null, value: null }
                          ];
                          __composite["0"]["label"] =
                            "\u0627\u0646\u062a\u0634\u0627\u0631";
                          __composite["0"]["value"] = "active";
                          __composite["1"]["label"] =
                            "\u067e\u06cc\u0634\u200c\u0646\u0648\u06cc\u0633";
                          __composite["1"]["value"] = "inactive";
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["select___9TBDt__popup"]}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__oH2Hq
                      )}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h3HNr
                        )}
                      >
                        {
                          "\u062b\u0628\u062a \u0641\u0639\u0627\u0644\u06cc\u062a"
                        }
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </div>
          </AntdModal>
          <div className={classNames(projectcss.all, sty.freeBox__xUbXw)}>
            <div className={classNames(projectcss.all, sty.freeBox__eceOp)}>
              <div className={classNames(projectcss.all, sty.freeBox___2OI8Z)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aP3Ko
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0641\u0639\u0627\u0644\u06cc\u062a\u200c\u200c\u0647\u0627\u06cc \u062f\u0631 \u062c\u0631\u06cc\u0627\u0646"
                      }
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <ApiRequest
                data-plasmic-name={"getActiveActivities"}
                data-plasmic-override={overrides.getActiveActivities}
                className={classNames(
                  "__wab_instance",
                  sty.getActiveActivities
                )}
                config={(() => {
                  try {
                    return {
                      headers: { "x-token": $$.me()?.token }
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tlS
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vHrCk
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getActiveActivities",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getActiveActivities",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getActiveActivities",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                params={(() => {
                  try {
                    return { status: "active" };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                url={"https://noapi.darkube.app/webhook/activities"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__skYwC
                  )}
                >
                  {""}
                </div>
              </ApiRequest>
              {(() => {
                try {
                  return !!$state?.getActiveActivities?.data?.message;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__jiZxg)}>
                  <Empty
                    className={classNames("__wab_instance", sty.empty__kHQzl)}
                  >
                    {
                      "\u062f\u0627\u062f\u0647\u200c\u0627\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f!"
                    }
                  </Empty>
                </div>
              ) : null}
              {(() => {
                try {
                  return !$state?.getActiveActivities?.data?.message;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__td3Ff)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.getActiveActivities.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <TaskCardActivitie
                        className={classNames(
                          "__wab_instance",
                          sty.taskCardActivitie__qdJYz
                        )}
                        gender={(() => {
                          try {
                            return currentItem.gender;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        id={(() => {
                          try {
                            return currentItem?.id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        name={(() => {
                          try {
                            return currentItem.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        status={(() => {
                          try {
                            return currentItem.status;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___98ZcV)}>
              <div className={classNames(projectcss.all, sty.freeBox__x2Yyz)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__v1BP8
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0641\u0639\u0627\u0644\u06cc\u062a\u200c\u200c\u0647\u0627\u06cc \u067e\u06cc\u0634\u200c\u0646\u0648\u06cc\u0633"
                      }
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <ApiRequest
                data-plasmic-name={"getInActiveActivities"}
                data-plasmic-override={overrides.getInActiveActivities}
                className={classNames(
                  "__wab_instance",
                  sty.getInActiveActivities
                )}
                config={(() => {
                  try {
                    return {
                      headers: { "x-token": $$.me()?.token }
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rGKvx
                    )}
                  >
                    {""}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zCo4
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getInActiveActivities",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getInActiveActivities",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getInActiveActivities",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                params={(() => {
                  try {
                    return {
                      status: "inactive"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                url={"https://noapi.darkube.app/webhook/activities"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wvHj2
                  )}
                >
                  {""}
                </div>
              </ApiRequest>
              {(() => {
                try {
                  return !!$state?.getInActiveActivities?.data?.message;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__wo8Zt)}>
                  <Empty
                    className={classNames("__wab_instance", sty.empty__nijk8)}
                  >
                    {
                      "\u062f\u0627\u062f\u0647\u200c\u0627\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f!"
                    }
                  </Empty>
                </div>
              ) : null}
              {(() => {
                try {
                  return !$state?.getInActiveActivities?.data?.message;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__rGLi)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.getInActiveActivities.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <TaskCardActivitie
                        className={classNames(
                          "__wab_instance",
                          sty.taskCardActivitie__ein3U
                        )}
                        gender={(() => {
                          try {
                            return currentItem.gender;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        id={(() => {
                          try {
                            return currentItem?.id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        name={(() => {
                          try {
                            return currentItem.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        status={(() => {
                          try {
                            return currentItem.status;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "coreHeaderAdminHeader",
    "modal",
    "form",
    "input",
    "svg",
    "getActiveActivities",
    "getInActiveActivities"
  ],
  coreHeaderAdminHeader: ["coreHeaderAdminHeader"],
  modal: ["modal", "form", "input", "svg"],
  form: ["form", "input"],
  input: ["input"],
  svg: ["svg"],
  getActiveActivities: ["getActiveActivities"],
  getInActiveActivities: ["getInActiveActivities"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  coreHeaderAdminHeader: typeof CoreHeaderAdminHeader;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  svg: "svg";
  getActiveActivities: typeof ApiRequest;
  getInActiveActivities: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminActivityActivitesList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminActivityActivitesList__VariantsArgs;
    args?: PlasmicAdminActivityActivitesList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminActivityActivitesList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdminActivityActivitesList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminActivityActivitesList__ArgProps,
          internalVariantPropNames:
            PlasmicAdminActivityActivitesList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminActivityActivitesList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminActivityActivitesList";
  } else {
    func.displayName = `PlasmicAdminActivityActivitesList.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminActivityActivitesList = Object.assign(
  // Top-level PlasmicAdminActivityActivitesList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    coreHeaderAdminHeader: makeNodeComponent("coreHeaderAdminHeader"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    svg: makeNodeComponent("svg"),
    getActiveActivities: makeNodeComponent("getActiveActivities"),
    getInActiveActivities: makeNodeComponent("getInActiveActivities"),

    // Metadata about props expected for PlasmicAdminActivityActivitesList
    internalVariantProps: PlasmicAdminActivityActivitesList__VariantProps,
    internalArgProps: PlasmicAdminActivityActivitesList__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminActivityActivitesList;
/* prettier-ignore-end */
